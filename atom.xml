<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋意浓的小站</title>
  <subtitle>Web developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-14T06:39:19.094Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>秋意浓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular路由Ui-Router详解</title>
    <link href="http://yoursite.com/2017/04/14/Angular%E8%B7%AF%E7%94%B1Ui-Router%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/04/14/Angular路由Ui-Router详解/</id>
    <published>2017-04-14T06:34:43.000Z</published>
    <updated>2017-04-14T06:39:19.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UI-Router"><a href="#UI-Router" class="headerlink" title="UI-Router"></a>UI-Router</h2><p>UI-Router是Angular第三方开发用于管理UI与路由的模块，功能比Angular原生的ng-Route要强而且全，因此原生基本已经被其替代。 </p>
<p>UI-Router是采用的是一种状态管理机制，“状态”可以继承，“状态”不禁包含url，还有<code>views</code>,<code>controller</code>等，以此来组织路由和控制界面UI的渲染，而不是单纯的改变路由。对于UI方面提供嵌套视图，可以一个页面嵌套多个视图，多视图再嵌套单个视图，每个视图可提供其特定的controller等针对管理，方便视图重用且功能精细，可以打造十分复杂的web应用。<br><a id="more"></a></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>导入模块<code>angular-ui-router.js</code>,可以通过bower包管理器或github等下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;angular-ui-router/release/angular-ui-router.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>然后在ngApp中加入ui.router<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, [<span class="string">'ui.router'</span>]);</div></pre></td></tr></table></figure></p>
<p>然后再创建<code>login.html</code>用于嵌套，再在需要嵌套的页面配置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// index.html url'/'</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>再配置路由<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</div><div class="line">    $urlRouterProvider.otherwise(<span class="string">'/'</span>);</div><div class="line">    $stateProvider</div><div class="line">        .state(<span class="string">'login'</span>, &#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'/'</span>,</div><div class="line">            <span class="attr">templateUrl</span>: <span class="string">'login.html'</span>,</div><div class="line">        &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当进入主页它便自动将login.html嵌套到ui-view中。</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="ui-view"><a href="#ui-view" class="headerlink" title="ui-view"></a>ui-view</h3><p>ui-view是用来告诉<code>ui-router</code>哪里需要嵌套模板,视图可以未命名或命名。在任何模板（或根html）中只能有一个未命名的视图。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>=<span class="string">"data"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在同一模板中具有多个视图时可以如下设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(&quot;home&quot;, &#123;</div><div class="line">    views: &#123;</div><div class="line">        &quot;&quot;: &#123;</div><div class="line">            template: &quot;&lt;h1&gt;HELLO!&lt;/h1&gt;&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;chart&quot;: &#123;</div><div class="line">            template: &quot;&lt;chart_thing/&gt;&quot;</div><div class="line">        &#125;,</div><div class="line">        &quot;data&quot;: &#123;</div><div class="line">            templateUrl: &apos;tplUrl.html&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;    </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="autoscroll"><a href="#autoscroll" class="headerlink" title="autoscroll"></a>autoscroll</h3><p>在<code>ui-view</code>元素指令上使用的属性指令。它允许在填充视图时设置浏览器窗口的滚动行为。默认情况下，<code>$anchorScroll</code>被ui-router的自定义滚动服务<code>$uiViewScroll</code>覆盖。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ui-view</span> <span class="attr">autoscroll</span>[=<span class="string">'expression'</span>]/&gt;</span></div></pre></td></tr></table></figure></p>
<p>添加<code>autoscroll</code>属性到<code>ui-view</code>元素。（可选）使用表达式设置滚动是打开还是关闭。</p>
<h3 id="ui-sref"><a href="#ui-sref" class="headerlink" title="ui-sref"></a>ui-sref</h3><p>绑定在<code>&lt;a&gt;</code>标签，用于状态转换，类似<code>&lt;a&gt;</code>的<code>href</code>属性。如果状态具有关联的URL，底层通过<code>$state.href()</code>方法自动生成和更新属性。 </p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li>ui-sref=’stateName’ </li>
<li>ui-sref=’stateName({param: value, param: value})’</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"contact in contacts"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"contacts.detail(&#123; id: contact.id &#125;)"</span>&gt;</span>&#123;&#123; contact.name &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>生成后的HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/home"</span> <span class="attr">ui-sref</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/about"</span> <span class="attr">ui-sref</span>=<span class="string">"about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"contact in contacts"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/contacts/1"</span> <span class="attr">ui-sref</span>=<span class="string">"contacts.detail(&#123; id: contact.id &#125;)"</span>&gt;</span>Joe<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"contact in contacts"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/contacts/2"</span> <span class="attr">ui-sref</span>=<span class="string">"contacts.detail(&#123; id: contact.id &#125;)"</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"contact in contacts"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/contacts/3"</span> <span class="attr">ui-sref</span>=<span class="string">"contacts.detail(&#123; id: contact.id &#125;)"</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="ui-sref-active"><a href="#ui-sref-active" class="headerlink" title="ui-sref-active"></a>ui-sref-active</h3><p>与<code>ui-sref</code>一起使用的指令，在相关<code>ui-sref</code>指令的状态为活动时向元素添加类，并在非活动时删除它们。主要用例是通过使“活动”状态的菜单按钮显示不同，将其与非活动菜单项区分开，来简化依赖于<code>ui-sref</code>的导航菜单的特殊外观。</p>
<h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><pre><code>ui-sref-active=&apos;class1 class2 class3&apos;  // 当相关ui-sref的状态为活动时，将类“class1”，“class2”和“class3”分别添加到指令元素，并且当其不活动时将其删除。
</code></pre><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">ui-sref-active</span>=<span class="string">"active"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> <span class="attr">ui-sref</span>=<span class="string">"app.user(&#123;user: 'zhangsan'&#125;)"</span>&gt;</span>@zhangsan<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当应用程序状态为“app.user”，并包含值为“zhangsan”的状态参数“user”时，生成的HTML将显示为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li ui-sref-active=&quot;active&quot; class=&quot;item active&quot;&gt;</div><div class="line">    &lt;a ui-sref=&quot;app.user(&#123;user: &apos;zhangsan&apos;&#125;)&quot; href=&quot;/users/zhangsan&quot;&gt;@zhangsan&lt;/a&gt;</div><div class="line">  &lt;/li&gt;</div><div class="line">  &lt;!-- ... --&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></p>
<h2 id="state"><a href="#state" class="headerlink" title="$state"></a>$state</h2><h3 id="state-go"><a href="#state-go" class="headerlink" title="$state.go()"></a>$state.go()</h3><p><code>$state.go</code>可以在JavaScript中转换状态（类似<code>ui-sref</code>在html中转换）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$state.go(to,params,options)</div></pre></td></tr></table></figure></p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>to是stateName，必须，使用”^”或”.”表示相对状态； </li>
<li>params可空，类型是对象,挂载在对应<code>$stateparams</code>,参数也可以通过状态机制继承； </li>
<li>options可空，类型是对象，字段包括：<ul>
<li>location:为boolean类型默认true,如果是true会更新地址中的url,flase不会，若为replace会更新并覆盖最后一此的记录。</li>
<li>inherit为boolean类型默认true,如果是true会继承最近的的url中的参数。</li>
<li>relative为对象默认<code>$state.$current</code>,当定义为相对路劲时，定义那个状态是相对的。</li>
<li>notify为boolean类型默认为true, 当为true时广播<code>$stateChangeStart</code>和<br><code>$stateChangeSuccess</code>事件</li>
<li>reload为boolean类型默认为false,如果是true会强制重载且一切一样。 </li>
</ul>
</li>
</ul>
<h3 id="state-reload"><a href="#state-reload" class="headerlink" title="$state.reload()"></a>$state.reload()</h3><p>强制重载当前状态，与<code>$state.go</code>的options内配制reload=true类似。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$state.reload(&apos;contact.detail&apos;); //强制刷新contact.detail状态</div></pre></td></tr></table></figure></p>
<h3 id="state-includes-stateName-params"><a href="#state-includes-stateName-params" class="headerlink" title="$state.includes(stateName[, params])"></a>$state.includes(stateName[, params])</h3><p><code>$state.includes</code>方法用于判断当前激活状态是否是指定的状态或者是指定状态的子状态，返回时boolean值.<br>比如当前状态是<code>contacts.details.item</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$state.includes(<span class="string">"contacts"</span>); <span class="comment">// returns true</span></div><div class="line">$state.includes(<span class="string">"contacts.details"</span>); <span class="comment">// returns true</span></div><div class="line">$state.includes(<span class="string">"contacts.details.item"</span>); <span class="comment">// returns true</span></div><div class="line">$state.includes(<span class="string">"contacts.list"</span>); <span class="comment">// returns false</span></div><div class="line">$state.includes(<span class="string">"about"</span>); <span class="comment">// returns false</span></div></pre></td></tr></table></figure></p>
<p><code>params</code>，假设当前状态<code>contacts.details.item.edit</code>，其url是<code>/contacts/1/address/edit</code>，为:id参数填充1,:item参数填充<code>address</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$state.includes(<span class="string">"contacts.detail"</span>, &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;); <span class="comment">// returns true</span></div><div class="line">$state.includes(<span class="string">"contacts.detail.item"</span>, &#123;<span class="attr">item</span>:<span class="string">'address'</span>&#125;); <span class="comment">// returns true</span></div><div class="line">$state.includes(<span class="string">"contacts"</span>, &#123;<span class="attr">bogus</span>:<span class="string">'gnarly'</span>&#125;); <span class="comment">// returns false</span></div></pre></td></tr></table></figure></p>
<h3 id="state-is-stateOrName-params"><a href="#state-is-stateOrName-params" class="headerlink" title="$state.is(stateOrName[, params])"></a>$state.is(stateOrName[, params])</h3><p>类似<code>$state.includes</code>，但它比较严格。<br>假设当前状态：<code>contact.details.item</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$state.is(&quot;contact.details.item&quot;); // returns true</div><div class="line">$state.is(contactDetailItemStateConfigObj); // returns true</div><div class="line">// 其他一切都会返回false</div></pre></td></tr></table></figure></p>
<p>params:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$state.is(&quot;contacts.detail.item.edit&quot;, &#123;id: 1, item: &apos;address&apos;&#125;); // returns true</div><div class="line">// 其他一切都会返回false</div></pre></td></tr></table></figure></p>
<h3 id="state-href-stateOrName-params-options"><a href="#state-href-stateOrName-params-options" class="headerlink" title="$state.href(stateOrName [, params] [, options])"></a>$state.href(stateOrName [, params] [, options])</h3><p>一个URL生成方法，返回已经填充指定参数的状态的编译后的链接。</p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul>
<li>stateOeName：string，你想要生成的url的状态或者状态对象。</li>
<li>params：object，一个用于填充状态需要的参数的对象。</li>
<li>options：可选配置对象。<ul>
<li>lossy(当第一个参数url未被提供时是否继承导航的url进行构建href)</li>
<li>inherit(是否继承当前url的参数)</li>
<li>relative(当变化相对路径：如”^,定义的状态是相对的)</li>
<li>absolute(是否生成绝对url)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$state.href(&quot;about.person&quot;, &#123; person: &quot;bob&quot; &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="state-get-stateName"><a href="#state-get-stateName" class="headerlink" title="$state.get([stateName])"></a>$state.get([stateName])</h3><p>通过将名称作为字符串传递来检索任何状态的配置对象的方法</p>
<h3 id="state-current"><a href="#state-current" class="headerlink" title="$state.current"></a>$state.current</h3><p>返回状态对象的引用，用于访问自定义data,</p>
<h3 id="关于-state在模板中使用"><a href="#关于-state在模板中使用" class="headerlink" title="关于$state在模板中使用"></a>关于$state在模板中使用</h3><blockquote>
<p>注意：使用$State和$stateparams需要将其挂载到$rootscope</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">"myApp"</span>).run(<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope, $state, $stateParams</span>) </span>&#123;</div><div class="line">    $rootScope.$state = $state;</div><div class="line">    $rootScope.$stateParams = $stateParams;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>现在，可以访问模板中的状态：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-class</span>=<span class="string">"&#123; active: $state.includes('contacts') &#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/contacts"</span>&gt;</span>Contacts<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-class</span>=<span class="string">"&#123; active: $state.includes('about') &#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="urlRouterProvider"><a href="#urlRouterProvider" class="headerlink" title="$urlRouterProvider"></a>$urlRouterProvider</h2><p>在<code>UI-Router</code>中，<code>$urlRouterProvider</code>负责监听<code>$location</code>.当<code>$location</code>变化的时候，<code>$urlRouterProvider</code>开始在一个规则的列表中一个个的查找，直到找到匹配的值。<code>$urlRouterProvider</code>用于在后端指定url的状态配置。所有的url被编译成<code>UrlMatcher</code>对象。</p>
<h3 id="otherwise-rule"><a href="#otherwise-rule" class="headerlink" title="otherwise(rule)"></a>otherwise(rule)</h3><p>定义一个当请求的路径是无效路径时跳转的路径,处理无效路由。</p>
<p><code>rule</code>：你想重定向的url路径或一个返回的网址路径的规则函数。函数传入两个参数：<code>$injector</code>和<code>$location</code>服务，而且必须返回一个string的url。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">angular.module(&apos;Demo&apos;,[&apos;ui.router&apos;])</div><div class="line">  .config([&quot;$urlRouterProvider&quot;,function()&#123;</div><div class="line">      $urlRouterProvider.otherwise(rule); // rule = 重定向的url</div><div class="line">&#125;])</div></pre></td></tr></table></figure>
<h3 id="rule-rule"><a href="#rule-rule" class="headerlink" title="rule(rule)"></a>rule(rule)</h3><p>定义使用<code>$urlRouterProvider</code> 来匹配指定的URL的规则。</p>
<p><code>rule</code>：将<code>$injector</code>和<code>$location</code>作为arguments传入的处理函数。用来返回一个string类型的url路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'Demo'</span>,[<span class="string">'ui.router'</span>])</div><div class="line">    .config([<span class="string">"$urlRouterProvider"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$urlRouterProvider</span>)</span>&#123;</div><div class="line">        $urlRouterProvider.rule(<span class="function"><span class="keyword">function</span> (<span class="params">$injector, $location</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> path = $location.path(),</div><div class="line">            normalized = path.toLowerCase();</div><div class="line">            <span class="keyword">if</span> (path !== normalized) &#123;</div><div class="line">               <span class="keyword">return</span> normalized;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;])</div></pre></td></tr></table></figure>
<h3 id="when-what-handler"><a href="#when-what-handler" class="headerlink" title="when(what,handler)"></a>when(what,handler)</h3><p>为给定的URL匹配注册一个处理程序。</p>
<p>参数：</p>
<ul>
<li><code>what</code>：需要重定向的传入路径，当前路径。</li>
<li><code>handler</code>：需要重定向到的路径（或者是需要在路径被访问时运行的函数）</li>
</ul>
<p>handler是路径：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$urlRouterProvider</span>)</span>&#123;</div><div class="line">    <span class="comment">// when there is an empty route, redirect to /index   </span></div><div class="line">    $urlRouterProvider.when(<span class="string">''</span>, <span class="string">'/index'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// You can also use regex for the match parameter</span></div><div class="line">    $urlRouterProvider.when(<span class="regexp">/aspx/i</span>, <span class="string">'/index'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>handler是函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'Demo'</span>, [<span class="string">'ui.router'</span>]);</div><div class="line">    .config([<span class="string">"$urlRouterProvider"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$urlRouterProvider</span>) </span>&#123;</div><div class="line">        $urlRouterProvider.when($state.url, <span class="function"><span class="keyword">function</span> (<span class="params">$match, $stateParams</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ($state.$current.navigable !== state || !equalForKeys($match, $stateParams) &#123;</div><div class="line">                $state.transitionTo(state, $match, <span class="literal">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;]);</div></pre></td></tr></table></figure></p>
<p>如果提供一个函数处理，路由匹配的时候，这个函数就会被调用，它可以返回下列三种之一的结果。</p>
<ul>
<li>false，这个回应告诉 $urlRouter 规则并不匹配，应该查找其它匹配的状态，在我们希望验证用户是否访问正确地址的时候很有用。</li>
<li>字符串，$urlRouter 将其作为重定向目标。</li>
<li>true 或者 undefined，函数已经处理了这个 url</li>
</ul>
<h2 id="stateProvider"><a href="#stateProvider" class="headerlink" title="$stateProvider"></a>$stateProvider</h2><p><code>$stateProvider</code>用于配制’状态’，可以是链式配制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$stateProvider.state(stateName1, stateConfig1)</div><div class="line">              .state(stateName2,stateConfig2);</div></pre></td></tr></table></figure></p>
<h3 id="state-stateName-stateConfig"><a href="#state-stateName-stateConfig" class="headerlink" title="state(stateName,stateConfig);"></a>state(stateName,stateConfig);</h3><p>注册一个状态，并给定其配置。</p>
<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><ul>
<li>stateName是以个唯一的字符串，用于标记状态。 </li>
<li><p>stateConfig用于管理状态的配制，object类型,配置具有以下各项属性：</p>
<ul>
<li>template： html模板字符串，或者一个返回html模板字符串的函数。</li>
<li>templateUrl：模板路径的字符串，或者返回模板路径字符串的函数。</li>
<li>templateProvider：function，返回html模板字符串或模板路径的服务。</li>
<li>controller：string/function，新注册一个控制器函数或者一个已注册的控制器的名称字符串。</li>
<li>controllerProvider：function，返回控制器或者控制器名称的服务</li>
<li>controllerAs：string，控制器别名。</li>
<li>parent：string/object，手动指定该状态的父级。</li>
<li>resolve：object，将会被注入controller去执行的函数，<string,function>形式。它为状态的控制器提供了所需的依赖.这些依赖可以给状态对应的控制器提供所需要的内容或数据.</string,function></li>
<li>url：string，当前状态的对应url。</li>
<li>views：object，视图展示的配置。<string,object>形式。</string,object></li>
<li>abstract：boolean，一个永远不会被激活的抽象的状态，但可以给其子级提供特性的继承。默认是true。</li>
<li>onEnter：function，当进入一个状态后的回调函数。</li>
<li>onExit：function，当退出一个状态后的回调函数。</li>
<li><p>reloadOnSearch：boolean，如果为false，那么当一个search/query参数改变时不会触发相同的状态，用于当你修改$location.search()的时候不想重新加载页面。默认为true。</p>
</li>
<li><p>data：object，任意对象数据，用于自定义配置。继承父级状态的data属性。换句话说，通过原型继承可以达到添加一个data数据从而整个树结构都能获取到。</p>
</li>
<li>params：url里的参数值，通过它可以实现页面间的参数传递。</li>
</ul>
</li>
</ul>
<h3 id="decorator-name-func"><a href="#decorator-name-func" class="headerlink" title="decorator(name,func);"></a>decorator(name,func);</h3><p>通过内部的<code>$stateProvider</code>以扩展或者重写状态生成器。可用于添加<code>ui-router</code>的自定义功能，例如，基于状态名称推断<code>templateUrl</code>。</p>
<blockquote>
<p>警告：因为生成器的函数执行顺序的不确定，decorator不应该相互依赖。</p>
</blockquote>
<p>参数：</p>
<ul>
<li>name：需要修改的生成函数名称。</li>
<li>func：可选，负责修改生成器函数的函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$stateProvider.decorator(<span class="string">'views'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">state, parent</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = &#123;&#125;,</div><div class="line">      views = parent(state);</div><div class="line">  angular.forEach(views, <span class="function"><span class="keyword">function</span> (<span class="params">config, name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> autoName = (state.name + <span class="string">'.'</span> + name).replace(<span class="string">'.'</span>, <span class="string">'/'</span>);</div><div class="line">    config.templateUrl = config.templateUrl || <span class="string">'/partials/'</span> + autoName + <span class="string">'.html'</span>;</div><div class="line">    result[name] = config;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;);</div><div class="line">$stateProvider.state(<span class="string">'home'</span>, &#123;</div><div class="line">  <span class="attr">views</span>: &#123;</div><div class="line">    <span class="string">'contact.list'</span>: &#123; <span class="attr">controller</span>: <span class="string">'ListController'</span> &#125;,</div><div class="line">    <span class="string">'contact.item'</span>: &#123; <span class="attr">controller</span>: <span class="string">'ItemController'</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">$state.go(<span class="string">'home'</span>);</div></pre></td></tr></table></figure>
<p>以上代码修饰了<code>views</code>直接通过state的名称绑定完对应的页面模板。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="状态更改事件"><a href="#状态更改事件" class="headerlink" title="状态更改事件"></a>状态更改事件</h3><p>所有这些事件都从广播$rootScope。</p>
<ul>
<li>$stateChangeSuccess - 一旦状态转换完成就触发。</li>
<li>$stateChangeStart - 当转换开始时触发。</li>
<li>$stateNotFound - 当无法通过其名称找到状态时触发。</li>
<li>$stateChangeError - 在转换期间发生错误时触发。</li>
</ul>
<h3 id="视图加载事件"><a href="#视图加载事件" class="headerlink" title="视图加载事件"></a>视图加载事件</h3><ul>
<li>$viewContentLoading - 当视图开始加载时（在渲染DOM之前）每个视图触发一次。广播从$rootScope。</li>
<li>$viewContentLoaded - 当视图加载时（在渲染DOM之后）每个视图触发一次。从视图发出$scope。</li>
</ul>
<h3 id="事件触发执行顺序"><a href="#事件触发执行顺序" class="headerlink" title="事件触发执行顺序"></a>事件触发执行顺序</h3><p>下面来理一下一个状态被激活的过程是怎样的:</p>
<ol>
<li>触发$stateChangeStart事件,如果使用event.preventDefault(),会阻止状态改变. 如果没有找到对应状态,会触发$stateNotFound事件,然后中断.</li>
<li>触发$viewContentLoading事件.</li>
<li>如果在切换状态的过程中出错(比如resolve出错),触发$stateChangeError事件,无出错跳过此步.</li>
<li>触发上一个状态(若有)的onExit回调事件</li>
<li>触发当前状态的onEnter回调事件</li>
<li>触发$stateChangeSuccess事件</li>
<li>触发$viewContentLoaded事件</li>
</ol>
<h2 id="ui-router的单视图："><a href="#ui-router的单视图：" class="headerlink" title="ui-router的单视图："></a>ui-router的单视图：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"Demo"</span> <span class="attr">ng-controller</span>=<span class="string">"testCtrl as ctrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"test"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page1.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">this</span> is page <span class="number">1</span> <span class="keyword">for</span> app.</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page3.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">this</span> is page <span class="number">1</span> <span class="keyword">for</span> test.</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">angular.module('Demo', ['ui.router'])</div><div class="line">.config(["$stateProvider","$urlRouterProvider",routeConfig])</div><div class="line">.controller("testCtrl", angular.noop)</div><div class="line">function routeConfig($stateProvider,$urlRouterProvider)&#123;</div><div class="line">    $urlRouterProvider.otherwise("/app");</div><div class="line">    $stateProvider</div><div class="line">    .state("app",&#123;</div><div class="line">        url:"/app",</div><div class="line">        views:&#123;</div><div class="line">            "":&#123;</div><div class="line">                templateUrl:"'page1.html'"</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .state("test",&#123;</div><div class="line">        url:"/test",</div><div class="line">        views:&#123;</div><div class="line">            "":&#123;</div><div class="line">                templateUrl:"'page3.html'"</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ui-router的t多视图："><a href="#ui-router的t多视图：" class="headerlink" title="ui-router的t多视图："></a>ui-router的t多视图：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>=<span class="string">"Demo"</span> <span class="attr">ng-controller</span>=<span class="string">"testCtrl as ctrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.page1"</span>&gt;</span>app<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"test.page1(&#123;id:1&#125;)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ui-view</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'layout.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">      &lt;div ui-view=<span class="string">"nav@"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">      &lt;div ui-view&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'nav1.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">      &lt;ol&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.page1"</span>&gt;</span>app.page1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">      &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"app.page2"</span>&gt;</span>app.page2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span></span></span></div><div class="line">      &lt;/<span class="attr">ol</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'nav2.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">      &lt;ol&gt;</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"test.page1(&#123;id:1&#125;)"</span>&gt;</span>test.page1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">      &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ui-sref</span>=<span class="string">"test.page2"</span>&gt;</span>test.page2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span></span></span></div><div class="line">      &lt;/<span class="attr">ol</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page1.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">this</span> is page <span class="number">1</span> <span class="keyword">for</span> app.</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page2.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">this</span> is page <span class="number">2</span> <span class="keyword">for</span> app.</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page3.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">this</span> is page <span class="number">1</span> <span class="keyword">for</span> test.</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"'page4.html'"</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">this</span> is page <span class="number">2</span> <span class="keyword">for</span> test.</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'Demo'</span>, [<span class="string">'ui.router'</span>])</div><div class="line">.config([<span class="string">"$stateProvider"</span>,<span class="string">"$urlRouterProvider"</span>,routeConfig])</div><div class="line">.controller(<span class="string">"testCtrl"</span>, angular.noop)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeConfig</span>(<span class="params">$stateProvider,$urlRouterProvider</span>)</span>&#123;</div><div class="line">    $urlRouterProvider.otherwise(<span class="string">"/app/page1"</span>);</div><div class="line">    $stateProvider</div><div class="line">    .state(<span class="string">"app"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/app"</span>,</div><div class="line">          <span class="attr">views</span>:&#123;</div><div class="line">              <span class="string">""</span>:&#123;</div><div class="line">                  <span class="attr">templateUrl</span>:<span class="string">"'layout.html'"</span></div><div class="line">              &#125;,</div><div class="line">              <span class="string">"nav"</span>:&#123;</div><div class="line">                  <span class="attr">templateUrl</span>:<span class="string">"'nav1.html'"</span></div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">      .state(<span class="string">"app.page1"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/page1"</span>,</div><div class="line">          <span class="attr">templateUrl</span>:<span class="string">"'page1.html'"</span></div><div class="line">      &#125;)</div><div class="line">      .state(<span class="string">"app.page2"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/page2"</span>,</div><div class="line">          <span class="attr">templateUrl</span>:<span class="string">"'page2.html'"</span></div><div class="line">      &#125;)</div><div class="line">      .state(<span class="string">"test"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/test"</span>,</div><div class="line">          <span class="attr">views</span>:&#123;</div><div class="line">          <span class="string">""</span>:&#123;</div><div class="line">              <span class="attr">templateUrl</span>:<span class="string">"'layout.html'"</span></div><div class="line">          &#125;,</div><div class="line">           <span class="string">"nav"</span>:&#123;</div><div class="line">                  <span class="attr">templateUrl</span>:<span class="string">"'nav2.html'"</span></div><div class="line">              &#125;   </div><div class="line">      &#125;</div><div class="line">      &#125;)</div><div class="line">      .state(<span class="string">"test.page1"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/page1?:id"</span>,</div><div class="line">          <span class="attr">templateUrl</span>:<span class="string">"'page3.html'"</span>,</div><div class="line">          <span class="attr">controller</span>:[<span class="string">"$stateParams"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$stateParams</span>)</span>&#123;</div><div class="line">              <span class="built_in">console</span>.log($stateParams.id);<span class="comment">// 1  这里实现传参</span></div><div class="line">          &#125;],</div><div class="line">          <span class="attr">params</span>:&#123;</div><div class="line">              <span class="attr">id</span>:<span class="literal">null</span></div><div class="line">          &#125;</div><div class="line">      &#125;)</div><div class="line">      .state(<span class="string">"test.page2"</span>,&#123;</div><div class="line">          <span class="attr">url</span>:<span class="string">"/page2"</span>,</div><div class="line">          <span class="attr">templateUrl</span>:<span class="string">"'page4.html'"</span></div><div class="line">      &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/angular-ui/ui-router/wiki/Quick-Reference" target="_blank" rel="external">https://github.com/angular-ui/ui-router/wiki/Quick-Reference</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UI-Router&quot;&gt;&lt;a href=&quot;#UI-Router&quot; class=&quot;headerlink&quot; title=&quot;UI-Router&quot;&gt;&lt;/a&gt;UI-Router&lt;/h2&gt;&lt;p&gt;UI-Router是Angular第三方开发用于管理UI与路由的模块，功能比Angular原生的ng-Route要强而且全，因此原生基本已经被其替代。 &lt;/p&gt;
&lt;p&gt;UI-Router是采用的是一种状态管理机制，“状态”可以继承，“状态”不禁包含url，还有&lt;code&gt;views&lt;/code&gt;,&lt;code&gt;controller&lt;/code&gt;等，以此来组织路由和控制界面UI的渲染，而不是单纯的改变路由。对于UI方面提供嵌套视图，可以一个页面嵌套多个视图，多视图再嵌套单个视图，每个视图可提供其特定的controller等针对管理，方便视图重用且功能精细，可以打造十分复杂的web应用。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Gulp构建前端自动化</title>
    <link href="http://yoursite.com/2017/04/14/Gulp%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://yoursite.com/2017/04/14/Gulp构建前端自动化/</id>
    <published>2017-04-14T06:16:40.000Z</published>
    <updated>2017-04-15T08:21:10.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h2><p>gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器；她能自动化地完成 javascript、coffee、sass、less、html/image、css等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。<br><img src="/2017/04/14/Gulp构建前端自动化/demo.png" alt="demo.png" title=""><br><a id="more"></a><br>特点： </p>
<ul>
<li>易于使用：通过代码优于配置的策略，gulp 让简单的任务简单，复杂的任务可管理。</li>
<li>构建快速：利用 Node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。</li>
<li>易于学习：通过最少的 API，掌握gulp毫不费力，如同一系列流管道。</li>
<li>插件丰富：gulp 严格的插件指南确保插件如你期望的那样简洁高质得工作。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先确保你已经正确安装了nodejs环境。然后以全局方式安装gulp：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure></p>
<p>全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp</div></pre></td></tr></table></figure></p>
<p>如果想在安装的时候把gulp写进项目package.json文件的依赖中，则可以加上–save-dev：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp</div></pre></td></tr></table></figure></p>
<p>这样就完成了gulp的安装，接下来就可以在项目中应用gulp了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>第一步：建立gulpfile.js文件</p>
<p>gulp需要一个文件作为它的主文件，这个文件就是gulpfile.js。新建一个文件名为gulpfile.js的文件，然后放到你的项目目录中。之后要做的事情就是在gulpfile.js文件中定义任务。下面是一个最简单的gulpfile.js文件内容示例，它定义了一个默认的任务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第二步：运行gulp任务</p>
<p>要运行gulp任务，只需切换到存放gulpfile.js文件的目录，然后在命令行中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名，则会执行任务名为<code>default</code>的默认任务。</p>
<h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="src"><a href="#src" class="headerlink" title="src()"></a>src()</h3><p><code>gulp.src()</code>方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息。其语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(globs[, options]);</div></pre></td></tr></table></figure></p>
<p>globs参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组;类型为String或 Array.</p>
<p>options为可选参数。</p>
<h4 id="options-buffer"><a href="#options-buffer" class="headerlink" title="options.buffer"></a>options.buffer</h4><p>类型： Boolean 默认值： true</p>
<p>　　如果该项被设置为 false，那么将会以 stream 方式返回 file.contents 而不是文件 buffer 的形式。这在处理一些大文件的时候将会很有用。注意：插件可能并不会实现对 stream 的支持。</p>
<h4 id="options-read"><a href="#options-read" class="headerlink" title="options.read"></a>options.read</h4><p>类型： Boolean 默认值： true</p>
<p>如果该项被设置为 false， 那么 file.contents 会返回空值（null），也就是并不会去读取文件。</p>
<h4 id="options-base"><a href="#options-base" class="headerlink" title="options.base"></a>options.base</h4><p>类型： String ， 设置输出路径以某个路径的某个组成部分为基础向后拼接。</p>
<p>例如在一个路径为 client/js/somedir 的目录中，有一个文件叫 somefile.js ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'client/js/**/*.js'</span>) <span class="comment">// 匹配 'client/js/somedir/somefile.js' 现在 `base` 的值为 `client/js/`</span></div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build'</span>));  <span class="comment">// 写入 'build/somedir/somefile.js' 将`client/js/`替换为build</span></div><div class="line"> </div><div class="line">gulp.src(<span class="string">'client/js/**/*.js'</span>, &#123; <span class="attr">base</span>: <span class="string">'client'</span> &#125;) <span class="comment">// base 的值为 'client'</span></div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(<span class="string">'build'</span>));  <span class="comment">// 写入 'build/js/somedir/somefile.js' 将`client`替换为build</span></div></pre></td></tr></table></figure></p>
<h3 id="desk"><a href="#desk" class="headerlink" title="desk()"></a>desk()</h3><p><code>gulp.dest()</code>方法是用来写文件的，其语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.dest(path[,options])</div></pre></td></tr></table></figure></p>
<p><code>path</code>为写入文件的路径；<code>options</code>为一个可选的参数对象，以下为选项参数：</p>
<h4 id="options-cwd"><a href="#options-cwd" class="headerlink" title="options.cwd"></a>options.cwd</h4><p>类型： String 默认值： process.cwd()</p>
<p>输出目录的 cwd 参数，只在所给的输出目录是相对路径时候有效。</p>
<h4 id="options-mode"><a href="#options-mode" class="headerlink" title="options.mode"></a>options.mode</h4><p>类型： String 默认值： 0777</p>
<p>八进制权限字符，用以定义所有在输出目录中所创建的目录的权限。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.src(<span class="string">'script/jquery.js'</span>)　       <span class="comment">// 获取流</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/foo.js'</span>)); <span class="comment">// 写放文件</span></div></pre></td></tr></table></figure></p>
<p>下面再说说生成的文件路径与我们给<em>gulp.dest()</em>方法传入的路径参数之间的关系。 　　<em>gulp.dest(path)</em>生成的文件路径是我们传入的<em>path</em>参数后面再加上<em>gulp.src()</em>中有通配符开始出现的那部分路径。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = reruire(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/*.js</span></div><div class="line">gulp.src(<span class="string">'script/**/*.js'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); <span class="comment">//最后生成的文件路径为 dist/**/*.js</span></div><div class="line"><span class="comment">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ,则生成的文件路径为 dist/jquery/jquery.js</span></div></pre></td></tr></table></figure></p>
<p>用gulp.dest()把文件流写入文件后，文件流仍然可以继续使用。</p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h3><p><code>gulp.watch()</code>用来监视文件的变化，当文件发生变化后，我们可以利用它来执行相应的任务，例如文件压缩等。其语法为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch(glob[, opts], tasks);</div></pre></td></tr></table></figure></p>
<p>glob 为要监视的文件匹配模式，规则和用法与<code>gulp.src()</code>方法中的glob相同。 opts 为一个可选的配置对象，通常不需要用到。tasks为文件变化后要执行的任务，为一个数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'uglify'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something</span></div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'reload'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//do something</span></div><div class="line">&#125;);</div><div class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'uglify'</span>,<span class="string">'reload'</span>]);</div></pre></td></tr></table></figure></p>
<p>gulp.watch()还有另外一种使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.watch(glob[, opts, cb]);</div></pre></td></tr></table></figure></p>
<p>glob和opts参数与第一种用法相同;</p>
<p>cb参数为一个函数。每当监视的文件发生变化时，就会调用这个函数,并且会给它传入一个对象，该对象包含了文件变化的一些信息，type属性为变化的类型，可以是<code>added</code>,<code>changed</code>,<code>deleted</code>；<code>path</code>属性为发生变化的文件的路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'js/**/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event.type); <span class="comment">//变化类型added为新增,deleted为删除，changed为改变 </span></div><div class="line">    <span class="built_in">console</span>.log(event.path); <span class="comment">//变化的文件的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="task"><a href="#task" class="headerlink" title="task()"></a>task()</h3><p><code>gulp.task()</code>方法用来定义任务，内部使用的是Orchestrator(用于排序、执行任务和最大并发依赖关系的模块)，其语法为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(name[, deps], fn)</div></pre></td></tr></table></figure></p>
<p><code>name</code> 为任务名；</p>
<p><code>deps</code> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数；</p>
<p><code>fn</code> 为任务函数，任务执行的代码都写在里面。该参数也是可选的。</p>
<p>当你定义一个简单的任务时，需要传入任务名字和执行函数两个属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;greet&apos;, function () &#123;</div><div class="line">   console.log(&apos;Hello world!&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行gulp greet的结果就是在控制台上打印出<code>“Hello world”</code>。</p>
<p>你也可以定义一个在gulp开始运行时候默认执行的任务，并将这个任务命名为<code>default</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;default&apos;, function () &#123;</div><div class="line">   // Your default task</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当有多个任务时，可以通过任务依赖来控制任务的执行顺序。</p>
<p>例如执行one,two,three这三个任务，那我们就可以定义一个空的任务，然后把那三个任务当做这个空的任务的依赖就行了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只要执行default任务，就相当于把one,two,three这三个任务执行了</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>]);</div></pre></td></tr></table></figure></p>
<p>如果任务相互之间没有依赖，任务就会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。但是如果某个任务所依赖的任务是异步的，就要注意了，gulp并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is done'</span>)</div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">//two任务虽然依赖于one任务,但并不会等到one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面的例子中执行two任务时，会先执行one任务，但不会去等待one任务中的异步操作完成后再执行two任务，而是紧接着执行two任务。所以two任务会在one任务中的异步操作完成之前就执行了。</p>
<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？</p>
<p>有三种方法可以实现：</p>
<p>第一：在异步操作完成后执行一个回调函数来通知gulp这个异步任务已经完成,这个回调函数就是任务函数的第一个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123; <span class="comment">//cb为任务函数提供的回调，用来通知任务已经完成</span></div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  exec(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is finish'</span>);</div><div class="line">    cb();  <span class="comment">//执行回调，表示这个异步任务已经完成</span></div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">//这时two任务会在one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is finish'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第二：定义任务时返回一个流对象。适用于任务就是操作<code>gulp.src</code>获取到的流的情况。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> stream = gulp.src(<span class="string">'client/**/*.js'</span>)</div><div class="line">      .pipe(exec()) <span class="comment">//exec()中有某些异步操作</span></div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">    <span class="keyword">return</span> stream;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第三：返回一个<code>promise</code>对象，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</div><div class="line">gulp.task(<span class="string">'one'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> deferred = Q.defer();</div><div class="line"> </div><div class="line">  <span class="comment">// 执行异步的操作</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    deferred.resolve();</div><div class="line">  &#125;, <span class="number">1</span>);</div><div class="line">  <span class="keyword">return</span> deferred.promise;</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h3><p><code>gulp.run()</code>表示要执行的任务。可能会使用单个参数的形式传递多个任务。如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'task1'</span>,<span class="string">'task3'</span>,<span class="string">'task2'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：任务是尽可能多的并行执行的，并且可能不会按照指定的顺序运行。</p>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p><code>gulp-load-plugins</code>这个插件能自动帮你加载<code>package.json</code>文件里的gulp插件。例如假设<code>package.json</code>文件里的依赖是这样的:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"gulp"</span>: <span class="string">"~3.6.0"</span>,</div><div class="line">    <span class="attr">"gulp-rename"</span>: <span class="string">"~1.2.0"</span>,</div><div class="line">    <span class="attr">"gulp-ruby-sass"</span>: <span class="string">"~0.4.3"</span>,</div><div class="line">    <span class="attr">"gulp-load-plugins"</span>: <span class="string">"~0.5.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们可以在<code>gulpfile.js</code>中使用<code>gulp-load-plugins</code>来帮我们加载插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">//加载gulp-load-plugins插件，并马上运行它</div><div class="line">var plugins = require(&apos;gulp-load-plugins&apos;)();</div></pre></td></tr></table></figure></p>
<p>然后我们要使用<code>gulp-rename</code>和<code>gulp-ruby-sass</code>这两个插件的时候，就可以使用<code>plugins.rename</code>和<code>plugins.rubySass</code>来代替了,也就是原始插件名去掉gulp-前缀，之后再转换为驼峰命名。</p>
<h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p><code>gulp-rename</code>插件用来重命名文件流中的文件。用<code>gulp.dest()</code>方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用<code>gulp-rename</code>插件来改变文件流中的文件名。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'rename'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/1.js'</span>)</div><div class="line">        .pipe(uglify())           <span class="comment">//压缩</span></div><div class="line">        .pipe(rename(<span class="string">'1.min.js'</span>)) <span class="comment">//会将1.js重命名为1.min.js</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'js'</span>));   <span class="comment">// 压缩后的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="js文件压缩"><a href="#js文件压缩" class="headerlink" title="js文件压缩"></a>js文件压缩</h3><p><code>gulp-uglify</code>插件用来压缩js文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.js'</span>)             <span class="comment">// 要压缩的js文件</span></div><div class="line">        .pipe(uglify())              <span class="comment">// 使用uglify进行压缩</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div></pre></td></tr></table></figure></p>
<h3 id="css文件压缩"><a href="#css文件压缩" class="headerlink" title="css文件压缩"></a>css文件压缩</h3><p><code>gulp-minify-css</code>插件用来压缩css文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">"gulp-minify-css"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.css'</span>)     <span class="comment">// 要压缩的css文件</span></div><div class="line">        .pipe(minifyCss())    <span class="comment">// 压缩css</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="html文件压缩"><a href="#html文件压缩" class="headerlink" title="html文件压缩"></a>html文件压缩</h3><p><code>gulp-minify-html</code>插件用来压缩html文件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyHtml = <span class="built_in">require</span>(<span class="string">"gulp-minify-html"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.html'</span>)      <span class="comment">// 要压缩的html文件</span></div><div class="line">        .pipe(minifyHtml())     <span class="comment">// 压缩</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/html'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="js代码检查"><a href="#js代码检查" class="headerlink" title="js代码检查"></a>js代码检查</h3><p>使用<code>gulp-jshint</code>插件，用来检查js代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">"gulp-jshint"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'jsLint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter()); <span class="comment">// 输出检查结果</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><p><code>gulp-concat</code>插件，用来把多个文件合并为一个文件,我们可以用它来合并js或css文件等。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">"gulp-concat"</span>);</div><div class="line">gulp.task(<span class="string">'concat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/*.js'</span>)          <span class="comment">// 要合并的文件</span></div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))   <span class="comment">// 合并匹配到的js文件并命名为 "all.js"</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p><code>gulp-imagemin</code>插件来压缩jpg、png、gif等图片。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="keyword">var</span> pngquant = <span class="built_in">require</span>(<span class="string">'imagemin-pngquant'</span>); <span class="comment">//png图片压缩插件</span></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span>  gulp.src(<span class="string">'src/images/*'</span>)</div><div class="line">                .pipe(imagemin(&#123;</div><div class="line">                    <span class="attr">progressive</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">use</span>: [pngquant()] <span class="comment">//使用pngquant来压缩png图片</span></div><div class="line">                &#125;))</div><div class="line">                .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h3><p>使用<code>gulp-livereload</code>插件，当代码变化时，它可以帮我们自动刷新页面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),</div><div class="line">    livereload = <span class="built_in">require</span>(<span class="string">'gulp-livereload'</span>);</div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'less/*.less'</span>)</div><div class="line">        .pipe(less())</div><div class="line">        .pipe(gulp.dest(<span class="string">'css'</span>))</div><div class="line">        .pipe(livereload());</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  livereload.listen(); <span class="comment">//要在这里调用listen()方法</span></div><div class="line">  gulp.watch(<span class="string">'less/*.less'</span>, [<span class="string">'less'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><p>使用<code>gulp-connect</code>插件，可以启动一个本地服务器,常与<code>gulp-livereload</code>插件一块使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>),</div><div class="line">	connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'server'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    connect.server(&#123;</div><div class="line">        <span class="attr">livereload</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">port</span>: <span class="number">5000</span>  <span class="comment">//端口号</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Gulp简介&quot;&gt;&lt;a href=&quot;#Gulp简介&quot; class=&quot;headerlink&quot; title=&quot;Gulp简介&quot;&gt;&lt;/a&gt;Gulp简介&lt;/h2&gt;&lt;p&gt;gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器；她能自动化地完成 javascript、coffee、sass、less、html/image、css等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。&lt;br&gt;&lt;img src=&quot;/2017/04/14/Gulp构建前端自动化/demo.png&quot; alt=&quot;demo.png&quot; title=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端构建工具" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
      <category term="前端自动化" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Namespace命名空间使用说明</title>
    <link href="http://yoursite.com/2017/04/14/JavaScript-Namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2017/04/14/JavaScript-Namespace命名空间使用说明/</id>
    <published>2017-04-14T06:10:14.000Z</published>
    <updated>2017-04-14T06:12:11.452Z</updated>
    
    <content type="html"><![CDATA[<p>什么是命名空间？语言使用的一种代码组织的形式 通过名称空间来分类，区别不同的代码功能 。无论项目大小，如果一开始不严格按照命名空间来编写程序，当你写到上万行<code>JavaScript</code>程序的时候，我相信你一定会后悔你的<code>object</code>或者<code>function</code>命名已经很混乱了。所以建议童鞋们一开始就要养成命名空间的习惯，比如你要开发一个项目，功能可能如下：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置 </span></div><div class="line"><span class="keyword">var</span> config = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 前台 </span></div><div class="line">config.front = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台 </span></div><div class="line">config.admin = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台数据 </span></div><div class="line">config.admin.data = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台模块 </span></div><div class="line">config.admin.module = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台颜色模块 </span></div><div class="line">config.admin.module.color = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台图片模块 </span></div><div class="line">config.admin.module.images = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 后台搜索模块 </span></div><div class="line">config.admin.module.search = &#123;&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 给后台颜色模块加背景颜色改变功能 </span></div><div class="line">config.admin.module.color.changeBgColor = <span class="function"><span class="keyword">function</span>(<span class="params">color</span>) </span>&#123; </div><div class="line">    <span class="built_in">document</span>.body.style.background = color; </div><div class="line">&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 可以这么调用  </span></div><div class="line">config.admin.module.color.changeBgColor(<span class="string">'#F30'</span>);</div></pre></td></tr></table></figure></p>
<p>但是，以上声明命名空间的方式看起来不直观，我们来一个比较直观的结构化命名方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置 </span></div><div class="line"><span class="keyword">var</span> config = &#123; </div><div class="line">    <span class="comment">// 前台 </span></div><div class="line">    front : &#123;&#125;, </div><div class="line">      </div><div class="line">    <span class="comment">// 后台 </span></div><div class="line">    admin : &#123; </div><div class="line">        <span class="comment">// 数据层 </span></div><div class="line">        data : &#123;&#125;, </div><div class="line">  </div><div class="line">        <span class="comment">// 模块层 </span></div><div class="line">        <span class="built_in">module</span> : &#123; </div><div class="line">            <span class="comment">// 颜色模块 </span></div><div class="line">            color : &#123; </div><div class="line">                <span class="comment">// 背景颜色改变功能 </span></div><div class="line">                changeBgColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123; </div><div class="line">                    <span class="built_in">document</span>.body.style.background = color; </div><div class="line">                &#125;, </div><div class="line">                <span class="comment">// 前景颜色改变功能 </span></div><div class="line">                changeFnColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123; </div><div class="line">                    <span class="built_in">document</span>.body.style.color = color; </div><div class="line">                &#125; </div><div class="line">            &#125;, </div><div class="line">            <span class="comment">// 图片模块 </span></div><div class="line">            images : &#123; </div><div class="line">              </div><div class="line">            &#125;, </div><div class="line">            <span class="comment">// 搜索模块 </span></div><div class="line">            search : &#123; </div><div class="line">  </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">  </div><div class="line">&#125;; </div><div class="line">  </div><div class="line"><span class="comment">// 可以这么调用  </span></div><div class="line">config.admin.module.color.changeBgColor(<span class="string">'#F30'</span>);</div></pre></td></tr></table></figure></p>
<p>以上的声明方式就把结构化很好的呈现出来了，利用命名空间非常方便的管理维护拓展程序，当多人开发或者JavaScript代码写的数量巨大时不用担心命名冲突的问题。我们也可以写一个命名空间的功能，省去以上复杂的声明方式。</p>
<p>比如以上例子实际上我只是暂时用到<code>config.admin.module.color.changeBgColor</code>这个功能，那么我就需要先定义config，接着admin，然后<code>module</code>，最后是<code>color.changeBgColor</code>，比较繁琐，于是我们可以写一个命名空间注册的功能，直接注册就能用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 命名空间注册函数 </span></div><div class="line"><span class="keyword">var</span> namespace = &#123; </div><div class="line">    <span class="attr">reg</span> : <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> arr = s.split(<span class="string">'.'</span>); </div><div class="line">        <span class="keyword">var</span> namespace = <span class="built_in">window</span>; </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,k=arr.length;i&lt;k;i++)&#123; </div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> namespace[arr[i]] == <span class="string">'undefined'</span>)&#123; </div><div class="line">                namespace[arr[i]] = &#123;&#125;;  </div><div class="line">            &#125; </div><div class="line">  </div><div class="line">            namespace = namespace[arr[i]];           </div><div class="line">        &#125; </div><div class="line">    &#125;, </div><div class="line">    <span class="attr">del</span> : <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> arr = s.split(<span class="string">'.'</span>); </div><div class="line">        <span class="keyword">var</span> namespace = <span class="built_in">window</span>; </div><div class="line">  </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,k=arr.length;i&lt;k;i++)&#123; </div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> namespace[arr[i]] == <span class="string">'undefined'</span>)&#123; </div><div class="line">                <span class="keyword">return</span>; </div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>( k == i+<span class="number">1</span> )&#123; </div><div class="line">                <span class="keyword">delete</span>  namespace[arr[i]]; </div><div class="line">                <span class="keyword">return</span>; </div><div class="line">            &#125;<span class="keyword">else</span>&#123; </div><div class="line">                namespace = namespace[arr[i]];       </div><div class="line">            &#125;        </div><div class="line">        &#125;            </div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>可以这样注册命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 先注册命名空间 </div><div class="line">namespace.reg(&apos;config.admin.module.color&apos;); </div><div class="line">  </div><div class="line">// 添加功能 </div><div class="line">config.admin.module.color.changeBgColor = function(color)&#123; </div><div class="line">    document.body.style.background = color; </div><div class="line">&#125;; </div><div class="line">  </div><div class="line">// 调用功能 </div><div class="line">config.admin.module.color.changeBgColor(&apos;#F30&apos;); </div><div class="line">  </div><div class="line">// 删除命名空间 </div><div class="line">namespace.del(&apos;config.admin.module.color&apos;);</div></pre></td></tr></table></figure></p>
<p>命名空间没有唯一规则，只有根据每个项目以及项目负责人对程序的分析然后给出一定命名规则，比如有些项目根据功能命名空间，有些项目根据负责人名命名空间等等。但无论采用哪种方式，合理的命名空间在你应对大项目时多人合作时不会因为命名冲突而重构。因此你的站点中的js文件将有一篇是第一位引入的namespace.js，它定义了这个项目所有的命名空间与管理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是命名空间？语言使用的一种代码组织的形式 通过名称空间来分类，区别不同的代码功能 。无论项目大小，如果一开始不严格按照命名空间来编写程序，当你写到上万行&lt;code&gt;JavaScript&lt;/code&gt;程序的时候，我相信你一定会后悔你的&lt;code&gt;object&lt;/code&gt;或者&lt;code&gt;function&lt;/code&gt;命名已经很混乱了。所以建议童鞋们一开始就要养成命名空间的习惯，比如你要开发一个项目，功能可能如下：&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="命名空间" scheme="http://yoursite.com/tags/%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>使用artTemplate模板引擎开发网站</title>
    <link href="http://yoursite.com/2016/12/28/%E4%BD%BF%E7%94%A8artTemplate%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E5%BC%80%E5%8F%91%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2016/12/28/使用artTemplate模板引擎开发网站/</id>
    <published>2016-12-28T07:36:58.000Z</published>
    <updated>2016-12-28T09:13:08.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="artTemplate"><a href="#artTemplate" class="headerlink" title="artTemplate"></a>artTemplate</h2><p>artTemplate是一款性能卓越的 javascript 模板引擎。它采用预编译方式让性能有了质的飞跃，并且充分利用 javascript 引擎特性，使得其性能无论在前端还是后端都有极其出色的表现。在 chrome 下渲染效率测试中分别是知名引擎 Mustache 与 micro tmpl 的 25 、 32 倍（性能测试）。<br><img src="/2016/12/28/使用artTemplate模板引擎开发网站/test.png" alt="test.png" title=""><br>除了性能优势外，调试功能也值得一提。模板调试器可以精确定位到引发渲染错误的模板语句，解决了编写模板过程中无法调试的痛苦，让开发变得高效，也避免了因为单个模板出错导致整个应用崩溃的情况发生。</p>
<p>下载： <a href="https://raw.githubusercontent.com/aui/artTemplate/master/dist/template.js" target="_blank" rel="external">简洁语法版</a>(推荐) 、 <a href="https://raw.githubusercontent.com/aui/artTemplate/master/dist/template-native.js" target="_blank" rel="external">原生语法版</a>  、  <a href="https://github.com/aui/artTemplate" target="_blank" rel="external">Github</a></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol>
<li>性能卓越，执行速度通常是 Mustache 与 tmpl 的 20 多倍（性能测试）</li>
<li>支持运行时调试，可精确定位异常模板所在语句（演示）</li>
<li>对 NodeJS Express 友好支持</li>
<li>安全，默认对输出进行转义、在沙箱中运行编译后的代码（Node版本可以安全执行用户上传的模板）</li>
<li>支持include语句，可在浏览器端实现按路径加载模板</li>
<li>支持预编译，可将模板转换成为非常精简的 js 文件</li>
<li>模板语句简洁，无需前缀引用数据</li>
<li>支持所有流行的浏览器<a id="more"></a>
</li>
</ol>
<h2 id="作为前端模版引擎"><a href="#作为前端模版引擎" class="headerlink" title="作为前端模版引擎"></a>作为前端模版引擎</h2><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="编写模版"><a href="#编写模版" class="headerlink" title="编写模版"></a>编写模版</h4><p>创建一个html文件，引入<a href="https://raw.githubusercontent.com/aui/artTemplate/master/dist/template.js" target="_blank" rel="external">template.js</a>，然后在正文中放置一个id为content的div标签，用来存放接下来根据模板动态生成的html内容。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"template.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”content”</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使用一个<code>type=&quot;text/html&quot;</code>的script标签存放模板：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        &#123;&#123;each list as value i&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        &#123;&#123;/each&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="渲染模版"><a href="#渲染模版" class="headerlink" title="渲染模版"></a>渲染模版</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">    <span class="attr">title</span>: <span class="string">'标签'</span>,</div><div class="line">    <span class="attr">list</span>: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> html = template.render(<span class="string">'test'</span>, data);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><a href="http://aui.github.io/artTemplate/demo/basic.html" target="_blank" rel="external">演示</a></p>
<h3 id="不转义HTML"><a href="#不转义HTML" class="headerlink" title="不转义HTML"></a>不转义HTML</h3><p>模板引擎默认数据包含的 HTML 字符进行转义以避免 XSS 漏洞，若不需要转义的地方可使用==。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span><span class="undefined"></span></div><div class="line">    &#123;&#123;#value&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>若需要关闭默认转义，可以设置<code>template.isEscape = false</code>。<br><a href="http://aui.github.io/artTemplate/demo/no-escape.html" target="_blank" rel="external">演示</a></p>
<h3 id="在js中存放模板"><a href="#在js中存放模板" class="headerlink" title="在js中存放模板"></a>在js中存放模板</h3><p><code>template.compile([id], source)</code>将返回一个渲染函数。其中 id 参数是可选的，如果使用了 id 参数，可以使用<code>template.render(id, data)</code>渲染模板。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> source = <span class="string">'&lt;ul&gt;'</span></div><div class="line">+    <span class="string">'&#123;&#123;each list as value i&#125;&#125;'</span></div><div class="line">+        <span class="string">'&lt;li&gt;索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;&lt;/li&gt;'</span></div><div class="line">+    <span class="string">'&#123;&#123;/each&#125;&#125;'</span></div><div class="line">+ <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> render = template.compile(source);</div><div class="line"><span class="keyword">var</span> html = render(&#123;</div><div class="line">    <span class="attr">list</span>: [<span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p><a href="http://aui.github.io/artTemplate/demo/compile.html" target="_blank" rel="external">演示</a></p>
<h3 id="添加辅助方法"><a href="#添加辅助方法" class="headerlink" title="添加辅助方法"></a>添加辅助方法</h3><p><code>template.helper(name, callback)</code>辅助方法一般用来进行输出字符串或字符串替换。<br>例如编写一个显示当前时间的辅助方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">template.helper(<span class="string">'dateFormat'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">date, format</span>) </span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> data = &#123;</div><div class="line">	<span class="attr">time</span>: (<span class="keyword">new</span> <span class="built_in">Date</span>).toString(),</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> html = template(<span class="string">'test'</span>, data);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = html;</div></pre></td></tr></table></figure></p>
<p>在模板中的使用方式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;time | dateFormat:'yyyy年 MM月 dd日 hh:mm:ss'&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>支持传入参数与嵌套使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;time | say:'cd' | ubb | link&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>注意：引擎不会对辅助方法输出的 HTML 字符进行转义。<br><a href="http://aui.github.io/artTemplate/demo/helper.html" target="_blank" rel="external">演示</a></p>
<h2 id="作为后端引擎使用-配合node-js"><a href="#作为后端引擎使用-配合node-js" class="headerlink" title="作为后端引擎使用(配合node.js)"></a>作为后端引擎使用(配合node.js)</h2><h3 id="安装art-template"><a href="#安装art-template" class="headerlink" title="安装art-template"></a>安装art-template</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install art-template --save</div></pre></td></tr></table></figure>
<h3 id="编写artTemplate模板"><a href="#编写artTemplate模板" class="headerlink" title="编写artTemplate模板"></a>编写artTemplate模板</h3><p>在工作区下，创建index.html，并将如下代码输入index.html，保存。其中<code>&lt;ul&gt;</code>标签中的内容，就是模板代码。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'main'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;&#123;each list&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>编号：&#123;&#123;$value.id&#125;&#125; &amp;nbsp;&amp;nbsp;姓名：&#123;&#123;$value.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    &#123;&#123;/each&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>还记得<code>template(id, data)</code>方法吗？这是在前端DOM环境下的用法。 其实在NodeJS环境下，它就相当于<code>template(filename, data)</code>了，可以将需要渲染的模板文件名当作路径传给它的第一个参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</div><div class="line">    <span class="comment">//数据</span></div><div class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">list</span>: [&#123;<span class="attr">id</span>:<span class="string">'1'</span>, <span class="attr">name</span>:<span class="string">'张三'</span>&#125;, &#123;<span class="attr">id</span>:<span class="string">'2'</span>, <span class="attr">name</span>:<span class="string">'李四'</span>&#125;]&#125;;</div><div class="line">    <span class="comment">//渲染模板</span></div><div class="line">    <span class="keyword">var</span> html = template(<span class="string">'./index'</span>, data);</div><div class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</div><div class="line">    response.write(html);</div><div class="line">    response.end();</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"Server is running, listening on port 3000…"</span>);</div></pre></td></tr></table></figure></p>
<p>配置base指定模板目录可以缩短模板的路径，并且能够避免include语句越级访问任意路径引发安全隐患。例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">template.config(<span class="string">'base'</span>, __dirname);</div><div class="line"><span class="keyword">var</span> html = template(<span class="string">'index/main'</span>, data)</div></pre></td></tr></table></figure></p>
<p>在Windows命令行下，进入工作区，执行<code>node server.js</code>，服务器就启动了。 此时在本地机器上使用浏览器访问<code>http://localhost:3000</code>将会看到Html输出了。</p>
<h2 id="搭配express使用"><a href="#搭配express使用" class="headerlink" title="搭配express使用"></a>搭配express使用</h2><p>express框架是由javascript语言开发的，基于Node.js平台的，快速、开放、极简的web开发框架。</p>
<h3 id="安装art-template-1"><a href="#安装art-template-1" class="headerlink" title="安装art-template"></a>安装art-template</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install art-template --save</div></pre></td></tr></table></figure>
<h3 id="改造app-js"><a href="#改造app-js" class="headerlink" title="改造app.js"></a>改造app.js</h3><p>app.js是express的主要文件，这个文件里包含了指定模板引擎、指定视图文件默认路径的代码。需要将指定模板引擎的代码改为指定用art-template引擎。视图文件默认路径保持不变，因此无需改动。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首先，引入artTemplate模块</span></div><div class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</div><div class="line"></div><div class="line"><span class="comment">//用art-template引擎替换默认的jade引擎</span></div><div class="line">template.config(<span class="string">'base'</span>, <span class="string">''</span>);</div><div class="line">template.config(<span class="string">'extname'</span>, <span class="string">'.html'</span>);</div><div class="line">app.engine(<span class="string">'.html'</span>, template.__express);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div><div class="line"><span class="comment">//app.set('view engine', 'jade');</span></div></pre></td></tr></table></figure></p>
<h3 id="编写artTemplate模板-1"><a href="#编写artTemplate模板-1" class="headerlink" title="编写artTemplate模板"></a>编写artTemplate模板</h3><p>进入express文件夹中的views子文件夹，创建index.html，并将如下代码输入index.html，并保存。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'main'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        &#123;&#123;each list as value i&#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        &#123;&#123;/each&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="渲染模版-1"><a href="#渲染模版-1" class="headerlink" title="渲染模版"></a>渲染模版</h3><p>express默认访问index路由。进入routes文件夹，打开router.js，增加渲染模板的代码，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// 数据</span></div><div class="line">    <span class="keyword">var</span> data = &#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">'标签'</span>,</div><div class="line">        <span class="attr">list</span>: [<span class="string">'文艺'</span>, <span class="string">'博客'</span>, <span class="string">'摄影'</span>, <span class="string">'电影'</span>, <span class="string">'民谣'</span>, <span class="string">'旅行'</span>, <span class="string">'吉他'</span>]</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 渲染模板</span></div><div class="line">    res.render(<span class="string">'index'</span>, data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>代码中的<code>res.render(&#39;index&#39;, data)</code>调用，会调用artTemple模块中的<code>template.__express</code>方法，并传入模板文件名、数据。 <code>template.__express</code>方法是在app.js中注册给express框架的。</p>
<h2 id="预编译工具"><a href="#预编译工具" class="headerlink" title="预编译工具"></a>预编译工具</h2><p>使用预编译工具可以让前端模版不再受浏览器的限制，支持如后端模版一样按文件放置、include 语句等特性，可以像后端一样书写前端模板！</p>
<p>编译后的模板不再依赖前端模板引擎与后端，模板可以通过 SeaJS 或 RequireJS 等加载器进行异步加载，亦能利用它们成熟的打包合并工具进行上线前的优化，如合并与压缩。</p>
<p>预编译工具：<a href="https://github.com/aui/tmodjs/" target="_blank" rel="external">TmodJS</a></p>
<p>TmodJS 一经启动，就无需人工干预，每次模板创建与更新都会自动编译，引入一个 js 即可使用template(path)接口调用本地模板文件，直到正式上线都无需对代码进行任何修改，整个过程简单自然。</p>
<h3 id="安装TmodJS"><a href="#安装TmodJS" class="headerlink" title="安装TmodJS"></a>安装TmodJS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g tmodjs</div></pre></td></tr></table></figure>
<h3 id="编译模板"><a href="#编译模板" class="headerlink" title="编译模板"></a>编译模板</h3><p>只需要运行tmod这个命令即可，默认配置参数可以满足绝大多数项目。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmod [模板目录] [配置参数]</div></pre></td></tr></table></figure></p>
<p>模板目录必须是模板的根目录，若无参数则为默认使用当前工作目录，tmodjs 会监控模板目录修改，每次模板修改都会增量编译。</p>
<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><ul>
<li><code>--debug</code> 输出调试版本</li>
<li><code>--charset value</code> 定义模板编码，默认utf-8</li>
<li><code>--output value</code> 定义输出目录，默认./build</li>
<li><code>--type value</code> 定义输出模块格式，默认default，可选cmd、amd、commonjs</li>
<li><code>--no-watch</code> 关闭模板目录监控</li>
<li><code>--version</code> 显示版本号</li>
<li><code>--help</code> 显示帮助信息</li>
</ul>
<p>配置参数将会保存在模板目录配置文件中，下次运行无需输入配置参数（–no-watch 与 –debug 除外）。</p>
<p>示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmod ./tpl --output ./build</div></pre></td></tr></table></figure></p>
<h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><p>根据编译的<code>type</code>的配置不同，会有两种不同使用方式：</p>
<h4 id="使用默认的格式"><a href="#使用默认的格式" class="headerlink" title="使用默认的格式"></a>使用默认的格式</h4><p>TmodJS 默认将整个目录的模板压缩打包到一个名为 template.js 的脚本中，可直接在页面中使用它：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"tpl/build/template.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line">	<span class="keyword">var</span> html = template(<span class="string">'news/list'</span>, _list);</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">'list'</span>).innerHTML = html;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>template.js 还支持 RequireJS、SeaJS、NodeJS 加载。<a href="http://aui.github.io/tmodjs/test/index.html" target="_blank" rel="external">示例</a></p>
</blockquote>
<h4 id="指定格式（amd-cmd-commonjs"><a href="#指定格式（amd-cmd-commonjs" class="headerlink" title="指定格式（amd / cmd / commonjs)"></a>指定格式（amd / cmd / commonjs)</h4><p>此时每个模板就是一个单独的模块，无需引用 template.js：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> render = <span class="built_in">require</span>(<span class="string">'./tpl/build/news/list'</span>);</div><div class="line"><span class="keyword">var</span> html = render(_list);</div></pre></td></tr></table></figure>
<blockquote>
<p>   注意：模板路径不能包含模板后缀名</p>
</blockquote>
<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p><a href="https://github.com/aui/tmodjs/archive/master.zip" target="_blank" rel="external">TmodJS 源码包</a>中<code>test/tpl</code>是一个演示项目的前端模板目录，基于默认配置。切换到源码目录后，编译：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tmod <span class="built_in">test</span>/tpl</div></pre></td></tr></table></figure>
<p>编译完毕后你可以在浏览器中打开 <a href="http://aui.github.io/tmodjs/test/index.html" target="_blank" rel="external">test/index.html</a> 查看如何使用编译后的模板。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>TmodJS 的项目配置文件保存在模板目录的 package.json 文件中：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"template"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"dependencies"</span>: &#123;</div><div class="line">        <span class="attr">"tmodjs"</span>: <span class="string">"1.0.0"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"tmodjs-config"</span>: &#123;</div><div class="line">        <span class="attr">"output"</span>: <span class="string">"./build"</span>,</div><div class="line">        <span class="attr">"charset"</span>: <span class="string">"utf-8"</span>,</div><div class="line">        <span class="attr">"syntax"</span>: <span class="string">"simple"</span>,</div><div class="line">        <span class="attr">"helpers"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"escape"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"compress"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"default"</span>,</div><div class="line">        <span class="attr">"runtime"</span>: <span class="string">"template.js"</span>,</div><div class="line">        <span class="attr">"combo"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"minify"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"cache"</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>output</td>
<td>String</td>
<td><code>&quot;./build&quot;</code></td>
<td>编译输出目录设置。如果设置为 false 则不输出</td>
</tr>
<tr>
<td>charset</td>
<td>String</td>
<td><code>&quot;utf-8&quot;</code></td>
<td>模板使用的编码（暂时只支持 utf-8）</td>
</tr>
<tr>
<td>syntax</td>
<td>String</td>
<td><code>&quot;simple&quot;</code></td>
<td>定义模板采用哪种语法。可选：<code>simple</code>、<code>native</code></td>
</tr>
<tr>
<td>helpers</td>
<td>String</td>
<td><code>null</code></td>
<td>自定义辅助方法路径</td>
</tr>
<tr>
<td>escape</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否过滤 XSS。如果后台给出的数据已经进行了 XSS 过滤，就可以关闭模板的过滤以提升模板渲染效率</td>
</tr>
<tr>
<td>compress</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否压缩 HTML 多余空白字符</td>
</tr>
<tr>
<td>type</td>
<td>String</td>
<td><code>&quot;default&quot;</code></td>
<td>输出的模块类型，可选：<code>default</code>、<code>cmd</code>、<code>amd</code>、<code>commonjs</code></td>
</tr>
<tr>
<td>runtime</td>
<td>String</td>
<td><code>&quot;template.js&quot;</code></td>
<td>设置输出的运行时名称</td>
</tr>
<tr>
<td>alias</td>
<td>String</td>
<td><code>null</code></td>
<td>设置模块依赖的运行时路径（仅针对于非<code>default</code>的类型模块配置字段。如果不指定模块内部会自动使用相对 runtime 的路径）</td>
</tr>
<tr>
<td>combo</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否合并模板（仅针对于 default 类型的模块）</td>
</tr>
<tr>
<td>minify</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否输出为压缩的格式</td>
</tr>
<tr>
<td>cache</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否开启编译缓存</td>
</tr>
<tr>
<td>verbose</td>
<td>Boolean</td>
<td><code>true</code></td>
<td>是否打印日志</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;artTemplate&quot;&gt;&lt;a href=&quot;#artTemplate&quot; class=&quot;headerlink&quot; title=&quot;artTemplate&quot;&gt;&lt;/a&gt;artTemplate&lt;/h2&gt;&lt;p&gt;artTemplate是一款性能卓越的 javascript 模板引擎。它采用预编译方式让性能有了质的飞跃，并且充分利用 javascript 引擎特性，使得其性能无论在前端还是后端都有极其出色的表现。在 chrome 下渲染效率测试中分别是知名引擎 Mustache 与 micro tmpl 的 25 、 32 倍（性能测试）。&lt;br&gt;&lt;img src=&quot;/2016/12/28/使用artTemplate模板引擎开发网站/test.png&quot; alt=&quot;test.png&quot; title=&quot;&quot;&gt;&lt;br&gt;除了性能优势外，调试功能也值得一提。模板调试器可以精确定位到引发渲染错误的模板语句，解决了编写模板过程中无法调试的痛苦，让开发变得高效，也避免了因为单个模板出错导致整个应用崩溃的情况发生。&lt;/p&gt;
&lt;p&gt;下载： &lt;a href=&quot;https://raw.githubusercontent.com/aui/artTemplate/master/dist/template.js&quot;&gt;简洁语法版&lt;/a&gt;(推荐) 、 &lt;a href=&quot;https://raw.githubusercontent.com/aui/artTemplate/master/dist/template-native.js&quot;&gt;原生语法版&lt;/a&gt;  、  &lt;a href=&quot;https://github.com/aui/artTemplate&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;性能卓越，执行速度通常是 Mustache 与 tmpl 的 20 多倍（性能测试）&lt;/li&gt;
&lt;li&gt;支持运行时调试，可精确定位异常模板所在语句（演示）&lt;/li&gt;
&lt;li&gt;对 NodeJS Express 友好支持&lt;/li&gt;
&lt;li&gt;安全，默认对输出进行转义、在沙箱中运行编译后的代码（Node版本可以安全执行用户上传的模板）&lt;/li&gt;
&lt;li&gt;支持include语句，可在浏览器端实现按路径加载模板&lt;/li&gt;
&lt;li&gt;支持预编译，可将模板转换成为非常精简的 js 文件&lt;/li&gt;
&lt;li&gt;模板语句简洁，无需前缀引用数据&lt;/li&gt;
&lt;li&gt;支持所有流行的浏览器
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="模版引擎" scheme="http://yoursite.com/tags/%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Loader.css - CSS3实现加载动画</title>
    <link href="http://yoursite.com/2016/12/23/Loader-css-CSS3%E5%AE%9E%E7%8E%B0%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2016/12/23/Loader-css-CSS3实现加载动画/</id>
    <published>2016-12-23T08:32:42.000Z</published>
    <updated>2016-12-23T09:10:51.734Z</updated>
    
    <content type="html"><![CDATA[<p>当网页的页面大小较大，用户加载可能需要较长的时间，在这些情况下，我们一般会用到（加载）loading动画，提示于用户页面在加载中，这些UX常识我想很多设计师都懂，但做一个GIF动画有点麻烦，为了方便，为大家分享Loader.css，仅用CSS3就能实现一个loading动画效果。<br>Loader.css当前支持28个动画效果。<br><img src="/2016/12/23/Loader-css-CSS3实现加载动画/loaders-demo.gif" alt="loaders-demo.gif" title=""><br><a id="more"></a><br><img src="/2016/12/23/Loader-css-CSS3实现加载动画/loaders-demo-2.gif" alt="loaders-demo-2.gif" title=""><br><img src="/2016/12/23/Loader-css-CSS3实现加载动画/loaders-demo-3.gif" alt="loaders-demo-3.gif" title=""></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Step 1: 引入 loaders.min.css 和 loaders.css.js，这个JS仅是为了简化动画的DIV标签，如果不加这个JS，那么你的动画就必须加上对应数量DIV标签才能正常显示动画，所以建议加上，这样语义化好会好些。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"loaders.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"loaders.css.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Step 2: HTML代码，给loading元素加入动画class，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loader-inner ball-pulse"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="改变加载动画颜色"><a href="#改变加载动画颜色" class="headerlink" title="改变加载动画颜色"></a>改变加载动画颜色</h2><p>此外你还要可以为loading动画加上颜色，代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ball-grid-pulse</span> &gt; <span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">background</span>: orange;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><table>
<thead>
<tr>
<th>IE 11</th>
<th>Firefox 36</th>
<th>Chrome 41</th>
<th>Safari 8</th>
</tr>
</thead>
<tbody>
<tr>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
</tbody>
</table>
<p>虽然不兼容IE8或以下版本，但我觉得已经够用了，目前现在用IE10和手机浏览网页的用户也很多了。</p>
<p><a href="https://connoratherton.com/loaders" target="_blank" rel="external">在线预览DEMO</a><br><a href="https://github.com/ConnorAtherton/loaders.css" target="_blank" rel="external">下载地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当网页的页面大小较大，用户加载可能需要较长的时间，在这些情况下，我们一般会用到（加载）loading动画，提示于用户页面在加载中，这些UX常识我想很多设计师都懂，但做一个GIF动画有点麻烦，为了方便，为大家分享Loader.css，仅用CSS3就能实现一个loading动画效果。&lt;br&gt;Loader.css当前支持28个动画效果。&lt;br&gt;&lt;img src=&quot;/2016/12/23/Loader-css-CSS3实现加载动画/loaders-demo.gif&quot; alt=&quot;loaders-demo.gif&quot; title=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Css" scheme="http://yoursite.com/categories/Css/"/>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Js模块化开发</title>
    <link href="http://yoursite.com/2016/12/23/Js%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/12/23/Js模块化开发/</id>
    <published>2016-12-23T06:21:16.000Z</published>
    <updated>2016-12-23T07:21:19.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端开发中，起初只要在<code>script</code>标签中嵌入几十上百行代码就能实现一些基本的交互效果，后来js得到重视，应用也广泛起来了，jQuery，Ajax，Node.Js，MVC，MVVM等的助力也使得前端开发得到重视，也使得前端项目越来越复杂，然而，JavaScript却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块<code>（module）</code>了，那么什么是模块呢？</p>
<p>一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。<br>根据AMD规范，我们可以使用<code>define</code>定义模块，使用<code>require</code>调用模块。<br>目前，通行的js模块规范主要有两种：<code>CommonJS</code>和<code>AMD</code>。</p>
<h2 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h2><p>AMD 即<code>Asynchronous Module Definition</code>，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是<code>CommonJS</code><br>模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。<br>AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。<br><a id="more"></a></p>
<h3 id="define-函数"><a href="#define-函数" class="headerlink" title="define() 函数"></a>define() 函数</h3><p>AMD规范只定义了一个函数 <code>define</code>，它是全局变量。函数的描述为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>参数说明：</p>
</blockquote>
<p>id：指定义中模块的名字，可选；如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。</p>
<p>依赖dependencies：是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。<br>依赖参数是可选的，如果忽略此参数，应该默认为[“require”, “exports”, “module”]。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p>
<p>工厂方法factory：模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p>
<h3 id="模块名的格式"><a href="#模块名的格式" class="headerlink" title="模块名的格式"></a>模块名的格式</h3><p>模块名用来唯一标识定义中模块，它们同样在依赖性数组中使用：</p>
<ul>
<li>模块名是用正斜杠分割的有意义单词的字符串</li>
<li>单词须为驼峰形式，或者”.”，”..”</li>
<li>模块名不允许文件扩展名的形式，如“.js”</li>
<li>模块名可以为 “相对的” 或 “顶级的”。如果首字符为“.”或“..”则为相对的模块名</li>
<li>顶级的模块名从根命名空间的概念模块解析</li>
<li>相对的模块名从 “require” 书写和调用的模块解析</li>
</ul>
<h3 id="使用-require-和-exports"><a href="#使用-require-和-exports" class="headerlink" title="使用 require 和 exports"></a>使用 require 和 exports</h3><p>创建一个名为”alpha”的模块，使用了require，exports，和名为”beta”的模块:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="string">"alpha"</span>, [<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, beta</span>) </span>&#123;</div><div class="line">      exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> beta.verb();</div><div class="line">          <span class="comment">//Or:return require("beta").verb();</span></div><div class="line">      &#125;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/amdjs/amdjs-api/wiki/require" target="_blank" rel="external">require API 介绍</a></p>
<p>目前，实现AMD的库有<code>RequireJS</code>、<code>curl</code> 、<code>Dojo</code> 、<code>Nodules</code> 等。</p>
<h2 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h2><p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>Node.JS</code>首先采用了js模块化的概念。<br>根据CommonJS规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。<br>输出模块变量的最好方法是使用<code>module.exports</code>对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> max = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (i -= <span class="number">1</span>; i++ <span class="xml"><span class="tag">&lt; <span class="attr">max</span>; ) &#123;</span></span></div><div class="line">    <span class="attr">console.log</span>(<span class="attr">i</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="attr">max</span> *= <span class="string">1.1;</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面代码通过<code>module.exports</code>对象，定义了一个函数，该函数就是模块外部与内部通信的桥梁。</p>
<p>加载模块使用<code>require</code>方法，该方法读取一个文件并执行，最后返回文件内部的<code>module.exports</code>对象。</p>
<h2 id="AMD和CMD"><a href="#AMD和CMD" class="headerlink" title="AMD和CMD"></a>AMD和CMD</h2><p><code>CMD（Common Module Definition）</code>通用模块定义。该规范明确了模块的基本书写格式和基本交互规则。该规范是在国内发展出来的。AMD是依赖关系前置，CMD是按需加载。<br>在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define(factory);</div></pre></td></tr></table></figure></p>
<p>factory 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。factory 方法在执行时，默认会传入三个参数：require、exports 和 module：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 模块代码</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>require</code>是可以把其他模块导入进来的一个参数，而<code>export</code>是可以把模块内的一些属性和方法导出的。</p>
<p><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD规范</a></p>
<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。<br>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。<br>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。<br>AMD:提前执行（异步加载：依赖先执行）+延迟执行<br>CMD:延迟执行（运行到需加载，根据顺序执行）<br>CMD 推崇依赖就近，AMD 推崇依赖前置。看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CMD</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>)</div><div class="line">	a.doSomething()</div><div class="line">	<span class="comment">// 此处略去 100 行</span></div><div class="line">	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>) <span class="comment">// 依赖可以就近书写</span></div><div class="line">	b.doSomething()</div><div class="line">	<span class="comment">// ... </span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AMD 默认推荐的是</span></div><div class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123; <span class="comment">// 依赖必须一开始就写好</span></div><div class="line">	a.doSomething()</div><div class="line">	<span class="comment">// 此处略去 100 行</span></div><div class="line">	b.doSomething()</div><div class="line">	...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>另外一个区别是：<br>AMD:API根据使用范围有区别，但使用同一个api接口<br>CMD:每个API的职责单一<br>AMD的优点是：异步并行加载，在AMD的规范下，同时异步加载是不会产生错误的。<br>CMD的机制则不同，这种加载方式会产生错误，如果能规范化模块内容形式，也可以<br>jquery1.7以上版本会自动模块化，支持AMD模式：主要是使用define函数，sea.js虽然是CommonJS规范，但却使用了define来定义模块<br>所以jQuery已经自动模块化了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">seajs.config(&#123;</div><div class="line">	<span class="string">'base'</span>:<span class="string">'/'</span>,</div><div class="line">	<span class="string">'alias'</span>:&#123;</div><div class="line">    	<span class="string">'jquery'</span>:<span class="string">'jquery.js'</span><span class="comment">//定义jQuery文件</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>define函数和AMD的define类似：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">     <span class="comment">//先要载入jQuery的模块</span></div><div class="line">     <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line">     <span class="comment">//然后将jQuery对象传给插件模块</span></div><div class="line">     <span class="built_in">require</span>(<span class="string">'./cookie'</span>)($);</div><div class="line">     <span class="comment">//开始使用 $.cookie方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="RequireJS和SeaJS"><a href="#RequireJS和SeaJS" class="headerlink" title="RequireJS和SeaJS"></a>RequireJS和SeaJS</h2><p><code>RequireJS</code>由James Burke创建，他也是AMD规范的创始人。<br><code>define</code>方法用于定义模块，<code>RequireJS</code>要求每个模块放在一个单独的文件里。<br><code>RequireJS</code> 和 <code>Sea.js</code> 都是模块加载器，倡导模块化开发理念，核心价值是让 JavaScript 的模块化开发变得简单自然。</p>
<p><code>SeaJS</code>与<code>RequireJS</code>最大的区别:<br>SeaJS对模块的态度是懒执行, 而RequireJS对模块的态度是预执行</p>
<p><a href="http://www.douban.com/note/283566440/" target="_blank" rel="external">不明白？看这篇图文并茂的文章吧</a></p>
<h3 id="Requirejs"><a href="#Requirejs" class="headerlink" title="Requirejs"></a>Requirejs</h3><h4 id="为什么要用requireJS"><a href="#为什么要用requireJS" class="headerlink" title="为什么要用requireJS"></a>为什么要用requireJS</h4><p>试想一下，如果一个网页有很多的js文件，那么浏览器在下载该页面的时候会先加载js文件，从而停止了网页的渲染，如果文件越多，浏览器可能失去响应。其次，要保证js文件的依赖性，依赖性最大的模块（文件）要放在最后加载，当依赖关系很复杂的时候，代码的编写和维护都会变得困难。<br><code>RequireJS</code>就是为了解决这两个问题而诞生的：<br>（1）实现js文件的异步加载，避免网页失去响应；<br>（2）管理模块之间的依赖性，便于代码的编写和维护。<br><a href="http://www.requirejs.cn/docs/download.html" target="_blank" rel="external">RequireJS文件下载</a></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><code>require.config</code>是用来定义别名的，在<code>paths</code>属性下配置别名。然后通过<code>requirejs(参数一，参数二)</code>；参数一是数组，传入我们需要引用的模块名，第二个参数是个回调函数，回调函数传入一个变量，代替刚才所引入的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//别名配置</span></div><div class="line">requirejs.config(&#123;</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: <span class="string">'jquery.min'</span><span class="comment">//可以省略.js</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//引入模块，用变量$表示jquery模块</span></div><div class="line">requirejs([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    $(<span class="string">'body'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>引入模块也可以只写<code>require()</code>。requirejs通过define()定义模块，定义的参数上同。在此模块内的方法和变量外部是无法访问的，只有通过return返回才行.<br>define 模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;<span class="comment">//引入jQuery模块return &#123;</span></div><div class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> x + y;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>将该模块命名为math.js保存。<br>main.js引入模块方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$,math</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(math.add(<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//110</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果定义的模块不依赖其他模块，则可以：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"trigkit4"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="string">"21"</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的。</p>
<h3 id="Sea-js"><a href="#Sea-js" class="headerlink" title="Sea.js"></a>Sea.js</h3><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><p>引入sea.js的库</p>
<ul>
<li>如何变成模块？<br>  define</li>
<li>如何调用模块？<br>  exports<br>  sea.js.use</li>
<li>如何依赖模块？<br>  require</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</div><div class="line">        <span class="comment">//exports : 对外的接口</span></div><div class="line">        <span class="comment">//requires : 依赖的接口 require('./test.js');</span></div><div class="line">        <span class="comment">//如果地址是一个模块的话，那么require的返回值就是模块中的exports</span></div><div class="line">    &#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="sea-js-开发实例"><a href="#sea-js-开发实例" class="headerlink" title="sea.js 开发实例"></a>sea.js 开发实例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span><span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标拖拽的模块化开发实践<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">styletype="text</span>/<span class="attr">css</span>"&gt;</span></div><div class="line">#div1&#123; width:200px; height:200px; background:black; position:absolute; display:none;&#125;</div><div class="line">#div2&#123; width:30px; height:30px; background:yellow; position:absolute; bottom:0; right:0;&#125;</div><div class="line">#div3&#123; width:100px; height:100px; background:blue; position:absolute; right:0; top:0;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sea.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">//A同事 ：</span></div><div class="line">seajs.use(<span class="string">'./main.js'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span> <span class="attr">id</span>=<span class="string">"input1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>A同事<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//A同事写的main.js:</span></div><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require,exports,module</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementById(<span class="string">'input1'</span>);</div><div class="line">    <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</div><div class="line">    <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">'div2'</span>);</div><div class="line">    <span class="keyword">var</span> oDiv3 = <span class="built_in">document</span>.getElementById(<span class="string">'div3'</span>);</div><div class="line"></div><div class="line">    <span class="built_in">require</span>(<span class="string">'./drag.js'</span>).drag(oDiv3);</div><div class="line">    oInput.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        oDiv1.style.display = <span class="string">'block'</span>;</div><div class="line">        <span class="built_in">require</span>(<span class="string">'./scale.js'</span>).scale(oDiv1,oDiv2);</div><div class="line"></div><div class="line">        <span class="built_in">require</span>.async(<span class="string">'./scale.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ex</span>) </span>&#123;</div><div class="line">            ex.scale(oDiv1,oDiv2);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>B同事<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//B同事写的drag.js:</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">        obj.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">            disX = ev.clientX - obj.offsetLeft;</div><div class="line">            disY = ev.clientY - obj.offsetTop;</div><div class="line">            </div><div class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">                <span class="keyword">var</span> L = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX , <span class="built_in">document</span>.documentElement.clientWidth - obj.offsetWidth , <span class="number">0</span> );</div><div class="line">                <span class="keyword">var</span> T = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY , <span class="built_in">document</span>.documentElement.clientHeight - obj.offsetHeight , <span class="number">0</span> );</div><div class="line">                </div><div class="line">                obj.style.left = L + <span class="string">'px'</span>;</div><div class="line">                obj.style.top = T + <span class="string">'px'</span>;</div><div class="line">            &#125;;</div><div class="line">            <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">                <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    exports.drag = drag;<span class="comment">//对外提供接口</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>C同事<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//C同事写的scale.js:</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">scale</span>(<span class="params">obj1,obj2</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> disX = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> disY = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> disW = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> disH = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        obj2.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">            disX = ev.clientX;</div><div class="line">            disY = ev.clientY;</div><div class="line">            disW = obj1.offsetWidth;</div><div class="line">            disH = obj1.offsetHeight;</div><div class="line">            </div><div class="line">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">                <span class="keyword">var</span> W = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientX - disX + disW , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">                <span class="keyword">var</span> H = <span class="built_in">require</span>(<span class="string">'./range.js'</span>).range(ev.clientY - disY + disH , <span class="number">500</span> , <span class="number">100</span>);</div><div class="line">                </div><div class="line">                obj1.style.width = W + <span class="string">'px'</span>;</div><div class="line">                obj1.style.height = H + <span class="string">'px'</span>;</div><div class="line">            &#125;;</div><div class="line">            <span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</div><div class="line">                <span class="built_in">document</span>.onmouseup = <span class="literal">null</span>;</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    exports.scale = scale;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>D同事<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// D同事的range.js--限定拖拽范围</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require,exports,module</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">range</span>(<span class="params">iNum,iMax,iMin</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>( iNum &gt; iMax )&#123;</div><div class="line">            <span class="keyword">return</span> iMax;</div><div class="line">        &#125;</div><div class="line">        elseif( iNum &lt; iMin )&#123;</div><div class="line">            <span class="keyword">return</span> iMin;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> iNum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    exports.range = range;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前端开发中，起初只要在&lt;code&gt;script&lt;/code&gt;标签中嵌入几十上百行代码就能实现一些基本的交互效果，后来js得到重视，应用也广泛起来了，jQuery，Ajax，Node.Js，MVC，MVVM等的助力也使得前端开发得到重视，也使得前端项目越来越复杂，然而，JavaScript却没有为组织代码提供任何明显帮助，甚至没有类的概念，更不用说模块&lt;code&gt;（module）&lt;/code&gt;了，那么什么是模块呢？&lt;/p&gt;
&lt;p&gt;一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。模块开发需要遵循一定的规范，否则就都乱套了。&lt;br&gt;根据AMD规范，我们可以使用&lt;code&gt;define&lt;/code&gt;定义模块，使用&lt;code&gt;require&lt;/code&gt;调用模块。&lt;br&gt;目前，通行的js模块规范主要有两种：&lt;code&gt;CommonJS&lt;/code&gt;和&lt;code&gt;AMD&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;AMD规范&quot;&gt;&lt;a href=&quot;#AMD规范&quot; class=&quot;headerlink&quot; title=&quot;AMD规范&quot;&gt;&lt;/a&gt;AMD规范&lt;/h2&gt;&lt;p&gt;AMD 即&lt;code&gt;Asynchronous Module Definition&lt;/code&gt;，中文名是“异步模块定义”的意思。它是一个在浏览器端模块化开发的规范，服务器端的规范是&lt;code&gt;CommonJS&lt;/code&gt;&lt;br&gt;模块将被异步加载，模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。&lt;br&gt;AMD 是 RequireJS 在推广过程中对模块定义的规范化的产出。&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Promise实现原理</title>
    <link href="http://yoursite.com/2016/12/22/Promise%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2016/12/22/Promise实现原理/</id>
    <published>2016-12-22T09:12:57.000Z</published>
    <updated>2016-12-22T09:58:10.189Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code> 对于一个Jser并不陌生， Promise 类似于一个事务管理器，它的作用就是将各种内嵌回调的事务用流水形式表达。利用 Promise 可以让异步编程更符合人的直觉，让代码逻辑更加清晰，把开发人员从回调地狱中释放出来。这么“高大上”的东西，以前写 nodejs 代码的时候只是简单的用用，还没有理解其基本的实现原理，罪过！<br>个人认为，理解编程思想最好的途径就是阅读一份简易的实现源码。很幸运，网上有不少Promise的简易实现，下面就来好好研究下吧！</p>
<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>目前， <code>Promise</code> 是<code>ECMAScript 6</code> 规范的重要特性之一，各大浏览器也开始慢慢支持这一特性。当然，也有一些第三方内库实现了该功能，最流行的如：<a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">bluebird</a>等。<br><code>Promise</code> 对象用来进行延迟( deferred )和异步( asynchronous )计算。一个Promise 处于以下四种状态之一:<br><a id="more"></a></p>
<ul>
<li>pending: 还没有得到肯定或者失败结果，进行中</li>
<li>fulfilled: 成功的操作</li>
<li>rejected: 失败的操作</li>
<li>settled: 已被 fulfilled 或 rejected</li>
</ul>
<p>Promise 对象有两个重要的方法，一个是 <code>then</code> ，另一个是 <code>resolve</code> ：</p>
<ul>
<li>then：将事务添加到事务队列中</li>
<li>resolve：开启流程，让整个操作从第一个事务开始执行</li>
</ul>
<p>Promise 常用方式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </div><div class="line">  ...</div><div class="line">  <span class="comment">// 事务触发</span></div><div class="line">  resovle(xxx);</div><div class="line">  ...</div><div class="line">&#125;);</div><div class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">   <span class="comment">// 满足</span></div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">  <span class="comment">// 拒绝</span></div><div class="line">&#125;).then().then()...</div></pre></td></tr></table></figure></p>
<p>示意图如下：<br><img src="/2016/12/22/Promise实现原理/promise_method.png" alt="promise_method.png" title=""></p>
<h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol>
<li><p>Promise 其实就是一个状态机。按照它的定义，可从如下基础代码开始：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PENDING = <span class="number">0</span>;  <span class="comment">// 进行中  </span></div><div class="line"><span class="keyword">var</span> FULFILLED = <span class="number">1</span>; <span class="comment">// 成功  </span></div><div class="line"><span class="keyword">var</span> REJECTED = <span class="number">2</span>;  <span class="comment">// 失败</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="comment">// 存储PENDING, FULFILLED或者REJECTED的状态</span></div><div class="line">  <span class="keyword">var</span> state = PENDING;</div><div class="line">  <span class="comment">// 存储成功或失败的结果值</span></div><div class="line">  <span class="keyword">var</span> value = <span class="literal">null</span>;</div><div class="line">  <span class="comment">// 存储成功或失败的处理程序，通过调用`.then`或者`.done`方法</span></div><div class="line">  <span class="keyword">var</span> handlers = [];</div><div class="line">  <span class="comment">// 成功状态变化</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    state = FULFILLED;</div><div class="line">    value = result;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 失败状态变化</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    state = REJECTED;</div><div class="line">    value = error;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下面是 Promise 的 resolve 方法实现：<br>注意：<code>resolve</code> 方法可接收的参数有两种：一个普通的值/对象或者一个 <code>Promise</code>对象。如果是普通的值/对象，则直接把结果传递到下一个对象；<br>如果是一个<code>Promise</code> 对象，则必须先等待这个子任务序列完成。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">    ...</div><div class="line">    function resolve(result) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> then = getThen(result);</div><div class="line">        <span class="comment">// 如果是一个promise对象</span></div><div class="line">        <span class="keyword">if</span> (then) &#123;</div><div class="line">          doResolve(then.bind(result), resolve, reject);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 修改状态，传递结果到下一个事务</span></div><div class="line">        fulfill(result);</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        reject(e);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 两个辅助方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查值是否是一个Promise，如果是，返回这个Promise的 `then`方法。</div><div class="line"> * @param &#123;Promise|Any&#125; value</div><div class="line"> * @return &#123;Function|Null&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getThen</span>(<span class="params">value</span>) </span>&#123;  </div><div class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> value;</div><div class="line">  <span class="keyword">if</span> (value &amp;&amp; (t === <span class="string">'object'</span> || t === <span class="string">'function'</span>)) &#123;</div><div class="line">    <span class="keyword">var</span> then = value.then;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">return</span> then;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 确保onfulfilled和onrejected只调用一次。</div><div class="line"> *</div><div class="line"> * @param &#123;Function&#125; fn</div><div class="line"> * @param &#123;Function&#125; onFulfilled</div><div class="line"> * @param &#123;Function&#125; onRejected</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">doResolve</span>(<span class="params">fn, onFulfilled, onRejected</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> done = <span class="literal">false</span>;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">    	fn(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        	<span class="keyword">if</span> (done) <span class="keyword">return</span>;</div><div class="line">       		done = <span class="literal">true</span>;</div><div class="line">       		onFulfilled(value);</div><div class="line">     	&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</div><div class="line">       		<span class="keyword">if</span> (done) <span class="keyword">return</span>;</div><div class="line">       		done = <span class="literal">true</span>;</div><div class="line">       		onRejected(reason);</div><div class="line">     	&#125;);</div><div class="line">    &#125; <span class="keyword">catch</span>(ex) &#123;</div><div class="line">     	<span class="keyword">if</span> (done) <span class="keyword">return</span>;</div><div class="line">     	done = <span class="literal">true</span>;</div><div class="line">     	onRejected(ex);</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>上面已经完成了一个完整的内部状态机，但我们并没有暴露一个方法去解析或则观察 <code>Promise</code> 。现在让我们开始解析 <code>Promise</code> ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;  </div><div class="line">    ...</div><div class="line">    doResolve(fn, resolve, reject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如你所见，我们复用了 <code>doResolve</code>，因为对于初始化的 fn 也要对其进行控制。fn 允许调用 resolve 或则 reject 多次，甚至抛出异常。<br>这完全取决于我们去保证 promise 对象仅被 resolved 或则 rejected 一次，且状态不能随意改变。</p>
</li>
<li><p>目前，我们已经有了一个完整的状态机，但我们仍然没有办法去观察它的任何变化。我们最终的目标是实现 <code>then</code> 方法，但 <code>done</code> 方法似乎更简单，所以先实现它。<br>我们的目标是实现 <code>promise.done(onFullfilled, onRejected) :</code></p>
<ul>
<li>onFulfilled 和 onRejected 两者只能有一个被执行，且执行次数为一次</li>
<li>该方法仅能被调用一次</li>
<li>一旦调用了该方法，则 promise 链式调用结束</li>
<li>无论是否 promise 已经被解析，都可以调用该方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> PENDING = <span class="number">0</span>;  <span class="comment">// 进行中  </span></div><div class="line"><span class="keyword">var</span> FULFILLED = <span class="number">1</span>; <span class="comment">// 成功  </span></div><div class="line"><span class="keyword">var</span> REJECTED = <span class="number">2</span>;  <span class="comment">// 失败</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="comment">// 存储PENDING, FULFILLED或者REJECTED的状态</span></div><div class="line">  <span class="keyword">var</span> state = PENDING;</div><div class="line"></div><div class="line">  <span class="comment">// 存储成功或失败的结果值</span></div><div class="line">  <span class="keyword">var</span> value = <span class="literal">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">// 存储成功或失败的处理程序，通过调用`.then`或者`.done`方法</span></div><div class="line">  <span class="keyword">var</span> handlers = [];</div><div class="line"></div><div class="line">  <span class="comment">// 成功状态变化</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    state = FULFILLED;</div><div class="line">    value = result;</div><div class="line">    handlers.forEach(handle);</div><div class="line">    handlers = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 失败状态变化</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">    state = REJECTED;</div><div class="line">    value = error;</div><div class="line">    handlers.forEach(handle);</div><div class="line">    handlers = <span class="literal">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">var</span> then = getThen(result);</div><div class="line">      <span class="keyword">if</span> (then) &#123;</div><div class="line">        doResolve(then.bind(result), resolve, reject)</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      fulfill(result);</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      reject(e);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 不同状态，进行不同的处理</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shandle</span>(<span class="params">handler</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (state === PENDING) &#123;</div><div class="line">      handlers.push(handler);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (state === FULFILLED &amp;&amp;</div><div class="line">        <span class="keyword">typeof</span> handler.onFulfilled === <span class="string">'function'</span>) &#123;</div><div class="line">        handler.onFulfilled(value);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (state === REJECTED &amp;&amp;</div><div class="line">        <span class="keyword">typeof</span> handler.onRejected === <span class="string">'function'</span>) &#123;</div><div class="line">        handler.onRejected(value);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.done = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</div><div class="line">    <span class="comment">// 保证异步</span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      handle(&#123;</div><div class="line">        <span class="attr">onFulfilled</span>: onFulfilled,</div><div class="line">        <span class="attr">onRejected</span>: onRejected</div><div class="line">      &#125;);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  doResolve(fn, resolve, reject);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当 <code>Promise</code> 被 <code>resolved</code> 或者 <code>rejected</code> 时，我们保证 <code>handlers</code> 将被通知。</p>
</li>
<li>现在我们已经实现了 <code>done</code> 方法，下面实现 <code>then</code> 方法就很容易了。需要注意的是，要在处理程序中新建一个<code>Promise</code> 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;  </div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> self.done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">// onFulfilled方法要有返回值！</span></div><div class="line">          <span class="keyword">return</span> resolve(onFulfilled(result));</div><div class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">          <span class="keyword">return</span> reject(ex);</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> resolve(result);</div><div class="line">      &#125;</div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">return</span> resolve(onRejected(error));</div><div class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">          <span class="keyword">return</span> reject(ex);</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> reject(error);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>完成了上面的代码，测试就很容易了。测试实例来自MDN：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>promise test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./mypromise.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>promise test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"log"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> promiseCount = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testPromise</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> thisPromiseCount = ++promiseCount;</div><div class="line">      <span class="keyword">var</span> log = <span class="built_in">document</span>.getElementById(<span class="string">'log'</span>);</div><div class="line">      log.insertAdjacentHTML(<span class="string">'beforeend'</span>, thisPromiseCount + <span class="string">') 开始(同步代码开始)'</span>);</div><div class="line">      <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">          log.insertAdjacentHTML(<span class="string">'beforeend'</span>, thisPromiseCount + <span class="string">') Promise开始(异步代码开始)'</span>);</div><div class="line">          <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            resolve(thisPromiseCount);</div><div class="line">          &#125;, <span class="built_in">Math</span>.random() * <span class="number">2000</span> + <span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">      p1.then(</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">          log.insertAdjacentHTML(<span class="string">'beforeend'</span>, val + <span class="string">') Promise被满足了(异步代码结束)'</span>);</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">      log.insertAdjacentHTML(<span class="string">'beforeend'</span>, thisPromiseCount + <span class="string">') 建立了Promise(同步代码结束)'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, testPromise);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果：<br><img src="/2016/12/22/Promise实现原理/demo.gif" alt="demo.gif" title=""></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过一份简易的实现代码，理解<code>Promise</code> 原理还是挺容易的。<a href="https://github.com/TenderQ/my-promise" target="_blank" rel="external">全部代码</a> ！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 对于一个Jser并不陌生， Promise 类似于一个事务管理器，它的作用就是将各种内嵌回调的事务用流水形式表达。利用 Promise 可以让异步编程更符合人的直觉，让代码逻辑更加清晰，把开发人员从回调地狱中释放出来。这么“高大上”的东西，以前写 nodejs 代码的时候只是简单的用用，还没有理解其基本的实现原理，罪过！&lt;br&gt;个人认为，理解编程思想最好的途径就是阅读一份简易的实现源码。很幸运，网上有不少Promise的简易实现，下面就来好好研究下吧！&lt;/p&gt;
&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;p&gt;目前， &lt;code&gt;Promise&lt;/code&gt; 是&lt;code&gt;ECMAScript 6&lt;/code&gt; 规范的重要特性之一，各大浏览器也开始慢慢支持这一特性。当然，也有一些第三方内库实现了该功能，最流行的如：&lt;a href=&quot;https://github.com/petkaantonov/bluebird&quot;&gt;bluebird&lt;/a&gt;等。&lt;br&gt;&lt;code&gt;Promise&lt;/code&gt; 对象用来进行延迟( deferred )和异步( asynchronous )计算。一个Promise 处于以下四种状态之一:&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基本命令</title>
    <link href="http://yoursite.com/2016/12/22/MongoDB%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/12/22/MongoDB基本命令/</id>
    <published>2016-12-22T08:22:10.000Z</published>
    <updated>2016-12-22T09:00:25.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装与启动"><a href="#安装与启动" class="headerlink" title="安装与启动"></a>安装与启动</h2><p><a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">下载Mongodb</a><br>成功安装并启动MongoDB后，再打开一个命令行窗口进入mongodb安装目录bin文件夹下输入<code>mongo</code>，就可以进行数据库的一些操作。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>输入<code>help</code>可以看到基本操作命令：<br><code>show dbs</code> 显示数据库列表<br><code>show collections</code> 显示当前数据库中的集合（类似关系数据库中的表）<br><code>show users</code> 显示用户<br><code>use &lt;db name&gt;</code> 切换当前数据库，这和MS-SQL里面的意思一样<br><code>db.help()</code> 显示数据库操作命令，里面有很多的命令<br><code>db.foo.help()</code> 显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令<br><code>db.foo.find()</code> 对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）<br><code>db.foo.find( { a : 1 } )</code> 对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1<br>MongoDB没有创建数据库的命令，但有类似的命令。<br>如：如果你想创建一个<code>myTest</code>的数据库，先运行<code>use myTest</code>命令，之后就做一些操作（如：<code>db.createCollection(&#39;user&#39;)</code>）,这样就可以创建一个名叫<code>myTest</code>的数据库。</p>
<a id="more"></a>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="Help查看命令提示"><a href="#Help查看命令提示" class="headerlink" title="Help查看命令提示"></a>Help查看命令提示</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">help</span></div><div class="line"> db.help();</div><div class="line"> db.yourColl.help();</div><div class="line"> db.youColl.find().help();</div><div class="line"> rs.help();</div></pre></td></tr></table></figure>
<h3 id="切换-创建数据库"><a href="#切换-创建数据库" class="headerlink" title="切换/创建数据库"></a>切换/创建数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use yourDB;  当创建一个集合(table)的时候会自动创建当前数据库</div></pre></td></tr></table></figure>
<h3 id="查询所有数据库"><a href="#查询所有数据库" class="headerlink" title="查询所有数据库"></a>查询所有数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show dbs;</div></pre></td></tr></table></figure>
<h3 id="删除当前使用数据库"><a href="#删除当前使用数据库" class="headerlink" title="删除当前使用数据库"></a>删除当前使用数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropDatabase();</div></pre></td></tr></table></figure>
<h3 id="从指定主机上克隆数据库"><a href="#从指定主机上克隆数据库" class="headerlink" title="从指定主机上克隆数据库"></a>从指定主机上克隆数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.cloneDatabase(&quot;127.0.0.1&quot;); 将指定机器上的数据库的数据克隆到当前数据库</div></pre></td></tr></table></figure>
<h3 id="从指定的机器上复制指定数据库数据到某个数据库"><a href="#从指定的机器上复制指定数据库数据到某个数据库" class="headerlink" title="从指定的机器上复制指定数据库数据到某个数据库"></a>从指定的机器上复制指定数据库数据到某个数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.copyDatabase(<span class="string">"mydb"</span>, <span class="string">"temp"</span>, <span class="string">"127.0.0.1"</span>);将本机的mydb的数据复制到temp数据库中</div></pre></td></tr></table></figure>
<h3 id="修复当前数据库"><a href="#修复当前数据库" class="headerlink" title="修复当前数据库"></a>修复当前数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.repairDatabase();</div></pre></td></tr></table></figure>
<h3 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.getName();</div><div class="line">db; db和getName方法是一样的效果，都可以查询当前使用的数据库</div></pre></td></tr></table></figure>
<h3 id="显示当前db状态"><a href="#显示当前db状态" class="headerlink" title="显示当前db状态"></a>显示当前db状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.stats();</div></pre></td></tr></table></figure>
<h3 id="当前db版本"><a href="#当前db版本" class="headerlink" title="当前db版本"></a>当前db版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.version();</div></pre></td></tr></table></figure>
<h3 id="查看当前db的链接机器地址"><a href="#查看当前db的链接机器地址" class="headerlink" title="查看当前db的链接机器地址"></a>查看当前db的链接机器地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.getMongo();</div></pre></td></tr></table></figure>
<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="创建一个聚集集合（table）"><a href="#创建一个聚集集合（table）" class="headerlink" title="创建一个聚集集合（table）"></a>创建一个聚集集合（table）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createCollection(&quot;collName&quot;, &#123;size: 20, capped: 5, max: 100&#125;);</div></pre></td></tr></table></figure>
<h3 id="得到指定名称的聚集集合（table）"><a href="#得到指定名称的聚集集合（table）" class="headerlink" title="得到指定名称的聚集集合（table）"></a>得到指定名称的聚集集合（table）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.getCollection(&quot;account&quot;);</div></pre></td></tr></table></figure>
<h3 id="得到当前db的所有聚集集合"><a href="#得到当前db的所有聚集集合" class="headerlink" title="得到当前db的所有聚集集合"></a>得到当前db的所有聚集集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.getCollectionNames();</div></pre></td></tr></table></figure>
<h3 id="显示当前db所有聚集索引的状态"><a href="#显示当前db所有聚集索引的状态" class="headerlink" title="显示当前db所有聚集索引的状态"></a>显示当前db所有聚集索引的状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.printCollectionStats();</div></pre></td></tr></table></figure>
<h2 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h2><h3 id="添加一个用户"><a href="#添加一个用户" class="headerlink" title="添加一个用户"></a>添加一个用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.addUser(&quot;name&quot;);</div><div class="line">db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true); 添加用户、设置密码、是否只读</div></pre></td></tr></table></figure>
<h3 id="数据库认证、安全模式"><a href="#数据库认证、安全模式" class="headerlink" title="数据库认证、安全模式"></a>数据库认证、安全模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.auth(&quot;userName&quot;, &quot;123123&quot;);</div></pre></td></tr></table></figure>
<h3 id="显示当前所有用户"><a href="#显示当前所有用户" class="headerlink" title="显示当前所有用户"></a>显示当前所有用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show users;</div></pre></td></tr></table></figure>
<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.removeUser(&quot;userName&quot;);</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="查询之前的错误信息"><a href="#查询之前的错误信息" class="headerlink" title="查询之前的错误信息"></a>查询之前的错误信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.getPrevError();</div></pre></td></tr></table></figure>
<h3 id="清除错误记录"><a href="#清除错误记录" class="headerlink" title="清除错误记录"></a>清除错误记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.resetError();</div></pre></td></tr></table></figure>
<h2 id="查看集合基本信息"><a href="#查看集合基本信息" class="headerlink" title="查看集合基本信息"></a>查看集合基本信息</h2><p>1、查看帮助  <code>db.yourColl.help();</code><br>2、查询当前集合的数据条数  <code>db.yourColl.count();</code><br>3、查看数据空间大小 <code>db.userInfo.dataSize();</code><br>4、得到当前聚集集合所在的db <code>db.userInfo.getDB();</code><br>5、得到当前聚集的状态 <code>db.userInfo.stats();</code><br>6、得到聚集集合总大小 <code>db.userInfo.totalSize();</code><br>7、聚集集合储存空间大小 <code>db.userInfo.storageSize();</code><br>8、Shard版本信息  <code>db.userInfo.getShardVersion()</code><br>9、聚集集合重命名 <code>db.userInfo.renameCollection(&quot;users&quot;); 将userInfo重命名为users</code><br>10、删除当前聚集集合 <code>db.userInfo.drop();</code></p>
<h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h2><h3 id="查询所有记录"><a href="#查询所有记录" class="headerlink" title="查询所有记录"></a>查询所有记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find();</div></pre></td></tr></table></figure>
<p>相当于：select* from userInfo;<br>默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”<br>但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。</p>
<h3 id="查询去掉后的当前聚集集合中的某列的重复数据"><a href="#查询去掉后的当前聚集集合中的某列的重复数据" class="headerlink" title="查询去掉后的当前聚集集合中的某列的重复数据"></a>查询去掉后的当前聚集集合中的某列的重复数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.distinct(&quot;name&quot;);</div></pre></td></tr></table></figure>
<p>会过滤掉name中的相同数据<br>相当于：select distict name from userInfo;</p>
<h3 id="查询age-22的记录"><a href="#查询age-22的记录" class="headerlink" title="查询age = 22的记录"></a>查询age = 22的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;&quot;age&quot;: 22&#125;);</div></pre></td></tr></table></figure>
<p>相当于： select * from userInfo where age = 22;</p>
<h3 id="查询age-gt-22的记录"><a href="#查询age-gt-22的记录" class="headerlink" title="查询age &gt; 22的记录"></a>查询age &gt; 22的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$gt: 22&#125;&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where age &gt;22;</p>
<h3 id="查询age-lt-22的记录"><a href="#查询age-lt-22的记录" class="headerlink" title="查询age &lt; 22的记录"></a>查询age &lt; 22的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$lt: 22&#125;&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where age &lt;22;</p>
<h3 id="查询age-gt-25的记录"><a href="#查询age-gt-25的记录" class="headerlink" title="查询age &gt;= 25的记录"></a>查询age &gt;= 25的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where age &gt;= 25;</p>
<h3 id="查询age-lt-25的记录"><a href="#查询age-lt-25的记录" class="headerlink" title="查询age &lt;= 25的记录"></a>查询age &lt;= 25的记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$lte: 25&#125;&#125;);</div></pre></td></tr></table></figure>
<h3 id="查询age-gt-23-并且-age-lt-26"><a href="#查询age-gt-23-并且-age-lt-26" class="headerlink" title="查询age &gt;= 23 并且 age &lt;= 26"></a>查询age &gt;= 23 并且 age &lt;= 26</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$gte: 23, $lte: 26&#125;&#125;);</div></pre></td></tr></table></figure>
<h3 id="查询name中包含-mongo的数据"><a href="#查询name中包含-mongo的数据" class="headerlink" title="查询name中包含 mongo的数据"></a>查询name中包含 mongo的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;name: /mongo/&#125;);</div></pre></td></tr></table></figure>
<p>相当于:select * from userInfo where name like ‘%mongo%’;</p>
<h3 id="查询name中以mongo开头的"><a href="#查询name中以mongo开头的" class="headerlink" title="查询name中以mongo开头的"></a>查询name中以mongo开头的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;name: /^mongo/&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where name like ‘mongo%’;</p>
<h3 id="查询指定列name、age数据"><a href="#查询指定列name、age数据" class="headerlink" title="查询指定列name、age数据"></a>查询指定列name、age数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;&#125;, &#123;name: 1, age: 1&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select name, age from userInfo;<br>当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。</p>
<h3 id="查询指定列name、age数据-age-gt-25"><a href="#查询指定列name、age数据-age-gt-25" class="headerlink" title="查询指定列name、age数据, age &gt; 25"></a>查询指定列name、age数据, age &gt; 25</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$gt: 25&#125;&#125;, &#123;name: 1, age: 1&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select name, age from userInfo where age &gt;25;</p>
<h3 id="按照年龄排序"><a href="#按照年龄排序" class="headerlink" title="按照年龄排序"></a>按照年龄排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">升序：db.userInfo.find().sort(&#123;age: 1&#125;);</div><div class="line">降序：db.userInfo.find().sort(&#123;age: -1&#125;);</div></pre></td></tr></table></figure>
<h3 id="查询name-zhangsan-age-22的数据"><a href="#查询name-zhangsan-age-22的数据" class="headerlink" title="查询name = zhangsan, age = 22的数据"></a>查询name = zhangsan, age = 22的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;name: &apos;zhangsan&apos;, age: 22&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where name = ‘zhangsan’ and age = ‘22’;</p>
<h3 id="查询前5条数据"><a href="#查询前5条数据" class="headerlink" title="查询前5条数据"></a>查询前5条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find().limit(5);</div></pre></td></tr></table></figure>
<p>相当于：selecttop 5 * from userInfo;</p>
<h3 id="查询10条以后的数据"><a href="#查询10条以后的数据" class="headerlink" title="查询10条以后的数据"></a>查询10条以后的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find().skip(10);</div></pre></td></tr></table></figure>
<p>相当于：select <em> from userInfo where id not in (<br>selecttop 10 </em> from userInfo<br>);</p>
<h3 id="查询在5-10之间的数据"><a href="#查询在5-10之间的数据" class="headerlink" title="查询在5-10之间的数据"></a>查询在5-10之间的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find().limit(10).skip(5);</div></pre></td></tr></table></figure>
<p>可用于分页，limit是pageSize，skip是第几页*pageSize</p>
<h3 id="or与-查询"><a href="#or与-查询" class="headerlink" title="or与 查询"></a>or与 查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;$or: [&#123;age: 22&#125;, &#123;age: 25&#125;]&#125;);</div></pre></td></tr></table></figure>
<p>相当于：select * from userInfo where age = 22 or age = 25;</p>
<h3 id="查询第一条数据"><a href="#查询第一条数据" class="headerlink" title="查询第一条数据"></a>查询第一条数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.findOne();</div></pre></td></tr></table></figure>
<p>相当于：selecttop 1 * from userInfo;<br>db.userInfo.find().limit(1);</p>
<h3 id="查询某个结果集的记录条数"><a href="#查询某个结果集的记录条数" class="headerlink" title="查询某个结果集的记录条数"></a>查询某个结果集的记录条数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;age: &#123;$gte: 25&#125;&#125;).count();</div></pre></td></tr></table></figure>
<p>相当于：select count(*) from userInfo where age &gt;= 20;</p>
<h3 id="按照某列进行排序"><a href="#按照某列进行排序" class="headerlink" title="按照某列进行排序"></a>按照某列进行排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.find(&#123;sex: &#123;$exists: true&#125;&#125;).count();</div></pre></td></tr></table></figure>
<p>相当于：select count(sex) from userInfo;</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.userInfo.ensureIndex(&#123;name: 1&#125;);</div><div class="line">db.userInfo.ensureIndex(&#123;name: 1, ts: -1&#125;);</div></pre></td></tr></table></figure>
<h3 id="查询当前聚集集合所有索引"><a href="#查询当前聚集集合所有索引" class="headerlink" title="查询当前聚集集合所有索引"></a>查询当前聚集集合所有索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.getIndexes();</div></pre></td></tr></table></figure>
<h3 id="查看总索引记录大小"><a href="#查看总索引记录大小" class="headerlink" title="查看总索引记录大小"></a>查看总索引记录大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.userInfo.totalIndexSize();</div></pre></td></tr></table></figure>
<h3 id="读取当前集合的所有index信息"><a href="#读取当前集合的所有index信息" class="headerlink" title="读取当前集合的所有index信息"></a>读取当前集合的所有index信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.reIndex();</div></pre></td></tr></table></figure>
<h3 id="删除指定索引"><a href="#删除指定索引" class="headerlink" title="删除指定索引"></a>删除指定索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.dropIndex(&quot;name_1&quot;);</div></pre></td></tr></table></figure>
<h3 id="删除所有索引索引"><a href="#删除所有索引索引" class="headerlink" title="删除所有索引索引"></a>删除所有索引索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.dropIndexes();</div></pre></td></tr></table></figure>
<h2 id="修改、添加、删除集合数据"><a href="#修改、添加、删除集合数据" class="headerlink" title="修改、添加、删除集合数据"></a>修改、添加、删除集合数据</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.save(&#123;name: ‘zhangsan’, age: 25, sex: true&#125;);</div></pre></td></tr></table></figure>
<p>添加的数据的数据列，没有固定，根据添加的数据为准</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.update(&#123;age: 25&#125;, &#123;$set: &#123;name: &apos;changeName&apos;&#125;&#125;, false, true);</div></pre></td></tr></table></figure>
<p>相当于：update users set name = ‘changeName’ where age = 25;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.update(&#123;name: &apos;Lisi&apos;&#125;, &#123;$inc: &#123;age: 50&#125;&#125;, false, true);</div></pre></td></tr></table></figure></p>
<p>相当于：update users set age = age + 50 where name = ‘Lisi’;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.update(&#123;name: &apos;Lisi&apos;&#125;, &#123;$inc: &#123;age: 50&#125;, $set: &#123;name: &apos;hoho&apos;&#125;&#125;, false, true);</div></pre></td></tr></table></figure></p>
<p>相当于：update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.remove(&#123;age: 132&#125;);</div></pre></td></tr></table></figure>
<h3 id="查询修改删除"><a href="#查询修改删除" class="headerlink" title="查询修改删除"></a>查询修改删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">db.users.findAndModify(&#123;</div><div class="line">    query: &#123;age: &#123;$gte: 25&#125;&#125;, </div><div class="line">    sort: &#123;age: -1&#125;, </div><div class="line">    update: &#123;$set: &#123;name: &apos;a2&apos;&#125;, $inc: &#123;age: 2&#125;&#125;,</div><div class="line">    remove: true</div><div class="line">&#125;);</div><div class="line"> </div><div class="line">db.runCommand(&#123; findandmodify : &quot;users&quot;, </div><div class="line">    query: &#123;age: &#123;$gte: 25&#125;&#125;, </div><div class="line">    sort: &#123;age: -1&#125;, </div><div class="line">    update: &#123;$set: &#123;name: &apos;a2&apos;&#125;, $inc: &#123;age: 2&#125;&#125;,</div><div class="line">    remove: true</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>update 或 remove 其中一个是必须的参数; 其他参数可选。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>详解</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td>查询过滤条件</td>
<td>{}</td>
</tr>
<tr>
<td>sort</td>
<td>如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作</td>
<td>{}</td>
</tr>
<tr>
<td>remove</td>
<td>若为true，被选中对象将在返回前被删除</td>
<td>N/A</td>
</tr>
<tr>
<td>update</td>
<td>一个 修改器对象</td>
<td>N/A</td>
</tr>
<tr>
<td>new</td>
<td>若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。</td>
<td>false</td>
</tr>
<tr>
<td>fields</td>
<td>参见Retrieving a Subset of Fields (1.5.0+)</td>
<td>All fields </td>
</tr>
<tr>
<td>upsert</td>
<td>创建新对象若查询结果为空。 示例 (1.5.4+)</td>
<td>false </td>
</tr>
</tbody>
</table>
<h2 id="语句块操作"><a href="#语句块操作" class="headerlink" title="语句块操作"></a>语句块操作</h2><h3 id="简单Hello-World"><a href="#简单Hello-World" class="headerlink" title="简单Hello World"></a>简单Hello World</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&quot;Hello World!&quot;);</div></pre></td></tr></table></figure>
<p>这种写法调用了print函数，和直接写入”Hello World!”的效果是一样的；</p>
<h3 id="将一个对象转换成json"><a href="#将一个对象转换成json" class="headerlink" title="将一个对象转换成json"></a>将一个对象转换成json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tojson(new Object());</div><div class="line">tojson(new Object(&apos;a&apos;));</div></pre></td></tr></table></figure>
<h3 id="循环添加数据"><a href="#循环添加数据" class="headerlink" title="循环添加数据"></a>循环添加数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; 30; i++) &#123;</div><div class="line">	db.users.save(&#123;name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样就循环添加了30条数据，同样也可以省略括号的写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for (var i = 0; i &lt; 30; i++) db.users.save(&#123;name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2&#125;);</div></pre></td></tr></table></figure></p>
<p>也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；</p>
<h3 id="find-游标查询"><a href="#find-游标查询" class="headerlink" title="find 游标查询"></a>find 游标查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var cursor = db.users.find();</div><div class="line">while (cursor.hasNext()) &#123; </div><div class="line">    printjson(cursor.next()); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样就查询所有的users信息，同样可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var cursor = db.users.find();</div><div class="line">while (cursor.hasNext()) &#123; printjson(cursor.next); &#125;</div></pre></td></tr></table></figure></p>
<p>同样可以省略{}号</p>
<h3 id="forEach迭代循环"><a href="#forEach迭代循环" class="headerlink" title="forEach迭代循环"></a>forEach迭代循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.find().forEach(printjson);</div></pre></td></tr></table></figure>
<p>forEach中必须传递一个函数来处理每条迭代的数据信息</p>
<h3 id="将find游标当数组处理"><a href="#将find游标当数组处理" class="headerlink" title="将find游标当数组处理"></a>将find游标当数组处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var cursor = db.users.find();</div><div class="line">cursor[4]; //取得下标索引为4的那条数据</div></pre></td></tr></table></figure>
<p>既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();<br>那样我们也可以用循环显示数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">for (var i = 0, len = c.length(); i &lt; len; i++) printjson(c[i]);</div></pre></td></tr></table></figure></p>
<h3 id="将find游标转换成数组"><a href="#将find游标转换成数组" class="headerlink" title="将find游标转换成数组"></a>将find游标转换成数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = db.users.find().toArray();//用toArray方法将其转换为数组</div><div class="line">printjson(arr[2]);</div></pre></td></tr></table></figure>
<h3 id="定制我们自己的查询结果"><a href="#定制我们自己的查询结果" class="headerlink" title="定制我们自己的查询结果"></a>定制我们自己的查询结果</h3><p>只显示age &lt;= 28的并且只显示age这列数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: 1&#125;).forEach(printjson);</div><div class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: true&#125;).forEach(printjson);</div><div class="line">//排除age的列</div><div class="line">db.users.find(&#123;age: &#123;$lte: 28&#125;&#125;, &#123;age: false&#125;).forEach(printjson);</div></pre></td></tr></table></figure></p>
<h3 id="forEach传递函数显示信息"><a href="#forEach传递函数显示信息" class="headerlink" title="forEach传递函数显示信息"></a>forEach传递函数显示信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.things.find(&#123;x:4&#125;).forEach(function(x) &#123;print(tojson(x));&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装与启动&quot;&gt;&lt;a href=&quot;#安装与启动&quot; class=&quot;headerlink&quot; title=&quot;安装与启动&quot;&gt;&lt;/a&gt;安装与启动&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;下载Mongodb&lt;/a&gt;&lt;br&gt;成功安装并启动MongoDB后，再打开一个命令行窗口进入mongodb安装目录bin文件夹下输入&lt;code&gt;mongo&lt;/code&gt;，就可以进行数据库的一些操作。&lt;/p&gt;
&lt;h2 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h2&gt;&lt;p&gt;输入&lt;code&gt;help&lt;/code&gt;可以看到基本操作命令：&lt;br&gt;&lt;code&gt;show dbs&lt;/code&gt; 显示数据库列表&lt;br&gt;&lt;code&gt;show collections&lt;/code&gt; 显示当前数据库中的集合（类似关系数据库中的表）&lt;br&gt;&lt;code&gt;show users&lt;/code&gt; 显示用户&lt;br&gt;&lt;code&gt;use &amp;lt;db name&amp;gt;&lt;/code&gt; 切换当前数据库，这和MS-SQL里面的意思一样&lt;br&gt;&lt;code&gt;db.help()&lt;/code&gt; 显示数据库操作命令，里面有很多的命令&lt;br&gt;&lt;code&gt;db.foo.help()&lt;/code&gt; 显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令&lt;br&gt;&lt;code&gt;db.foo.find()&lt;/code&gt; 对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据）&lt;br&gt;&lt;code&gt;db.foo.find( { a : 1 } )&lt;/code&gt; 对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1&lt;br&gt;MongoDB没有创建数据库的命令，但有类似的命令。&lt;br&gt;如：如果你想创建一个&lt;code&gt;myTest&lt;/code&gt;的数据库，先运行&lt;code&gt;use myTest&lt;/code&gt;命令，之后就做一些操作（如：&lt;code&gt;db.createCollection(&amp;#39;user&amp;#39;)&lt;/code&gt;）,这样就可以创建一个名叫&lt;code&gt;myTest&lt;/code&gt;的数据库。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mongodb" scheme="http://yoursite.com/tags/Mongodb/"/>
    
  </entry>
  
  <entry>
    <title>实时通讯之Socket.io</title>
    <link href="http://yoursite.com/2016/12/22/%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8BSocket-io/"/>
    <id>http://yoursite.com/2016/12/22/实时通讯之Socket-io/</id>
    <published>2016-12-22T07:15:51.000Z</published>
    <updated>2016-12-22T08:19:50.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。使用　WebSocket　，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道，两者之间就直接可以数据互相传送。而且它为我们实现即时服务带来了两大好处：</p>
<ul>
<li>节省资源：互相沟通的Header是很小的-大概只有 2 Bytes。</li>
<li>推送信息：不需要客户端请求，服务器可以主动传送数据给客户端。</li>
</ul>
<h2 id="Socket-io"><a href="#Socket-io" class="headerlink" title="Socket.io"></a>Socket.io</h2><p>Socket.IO是一个WebSocket库，包括了客户端的js和服务器端的nodejs，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。</p>
<a id="more"></a>
<h3 id="服务监听"><a href="#服务监听" class="headerlink" title="服务监听"></a>服务监听</h3><p>socket.io的服务端启动非常的简单，引用socket.io模块。然后调用listen函数，传入监听的端口号，开始服务监听。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</div></pre></td></tr></table></figure></p>
<h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><p>connection事件在客户端成功连接到服务端时触发，有了这个事件，我们可以随时掌握用户连接到服务端的信息。<br>当客户端成功建立连接时，在connection事件的回调函数中，我们还是可以为socket注册一些常用的事件,如：<code>disconnect</code>事件，它在客户端连接断开时触发，这时候我就知道用户已经离开了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(<span class="number">80</span>);</div><div class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">     <span class="comment">//连接成功...</span></div><div class="line">     socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="comment">//用户已经离开...</span></div><div class="line">     &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>为了在浏览器中能够访问到我们的服务，我们还需要在服务端搭建一个简单的web服务器，让浏览器能够访问我们的客户端页面。<br>为了便捷，我们选用node.js中常用的express框架来实现web服务，示例如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">	res.status(<span class="number">200</span>).send(<span class="string">'欢迎！'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server);</div><div class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">	<span class="comment">//do something</span></div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">80</span>);</div></pre></td></tr></table></figure></p>
<h3 id="客户端引用"><a href="#客户端引用" class="headerlink" title="客户端引用"></a>客户端引用</h3><p>服务端运行后会在根目录动态生成socket.io的客户端js文件，客户端可以通过固定路径/socket.io/socket.io.js添加引用。<br>首先添加网页index.html,并在网页中引用客户端js文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/socket.io/socket.io.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>当然这样的客户端引用方式并不是必须的，我们也可以引用官方的cdn或者下载到本地的客户端文件。一般情况下推荐引用动态生成的客户端文件，因为这样客户端和服务端的版本可以保持一致，减少出错的几率。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.socket.io/socket.io-1.2.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="连接服务"><a href="#连接服务" class="headerlink" title="连接服务"></a>连接服务</h3><p>当客户端成功加载socket.io客户端文件后会获取到一个全局对象io，我们将通过io.connect函数来向服务端发起连接请求。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'/'</span>);</div><div class="line">socket.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//连接成功</span></div><div class="line">&#125;);</div><div class="line">socket.on(<span class="string">'disconnect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="comment">//连接断开</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>connect函数可以接受一个url参数，url可以socket服务的http完整地址，也可以是相对路径，如果省略则表示默认连接当前路径。与服务端类似，客户端也需要注册相应的事件来捕获信息，不同的是客户端连接成功的事件是connect。</p>
<h3 id="实时通讯"><a href="#实时通讯" class="headerlink" title="实时通讯"></a>实时通讯</h3><p>当我们成功建立连接后，我们可以通过socket对象的send函数来互相发送消息，示例-客户端向服务端发送消息(index.html)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'/'</span>);</div><div class="line">socket.on(<span class="string">'connect'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="comment">//客户端连接成功后发送消息'hello world!'</span></div><div class="line">   socket.send(<span class="string">'hello world!'</span>);</div><div class="line">&#125;);</div><div class="line">socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">   alert(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>连接成功后，我们向服务端发送消息hello world!，还为socket注册了message事件，它是send函数对应的接收消息的事件，当服务端向客户端send消息时，我们就可以在message事件中接收到发送过来的消息。<br>服务端向客户端发送消息也可以通过send的方式，示例 - 服务端向客户端发送消息(app.js)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'scoket.io'</span>);</div><div class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">  socket.send(<span class="string">'欢迎！'</span>);</div><div class="line">  socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">      <span class="comment">//收到消息</span></div><div class="line">      <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>与客户端相同，服务端也需要为socket注册message事件来接收客户端发送过来的消息。</p>
<h3 id="发送信息"><a href="#发送信息" class="headerlink" title="发送信息"></a>发送信息</h3><p>socket.io既然是用来实现通讯的，那么如何发送、接收信息才是根本。<br>在socket.io中，emit函数用于发送数据，还上述讲解中，我们使用send的方式实现了信息的互发，其实send函数只是emit的封装，实际上还是使用了emit，且看send函数是如何实现的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> args = toArray(<span class="built_in">arguments</span>);</div><div class="line">  args.unshift(<span class="string">'message'</span>);</div><div class="line">  <span class="keyword">this</span>.emit.apply(<span class="keyword">this</span>, args);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在send函数中，获取到原来的参数，并在原来的基础上插入了一个参数message，然后调用了emit函数。通过send函数的实现，我们也学会了emit函数的用法，它有两个参数，第一个参数是事件名称，在接收端注册该事件就可以接收到发送过去的信息，事件名称可以自由定义，在不同的场景下，我们可以定义不同的事件来接收消息。第二个参数才是发送的数据。了解清楚了工作原理，下面来将send替换成emit函数发送信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//app.js</span></div><div class="line">io.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">     socket.emit(<span class="string">'message'</span>,<span class="string">'连接成功！'</span>);</div><div class="line">     socket.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="服务端事件"><a href="#服务端事件" class="headerlink" title="服务端事件"></a>服务端事件</h2><p>事件监听是实现通讯的基础。在一些关键的的状态下，socket.io可以注册相应的事件，通过事件监听，我们可以在这些事件中作出反应，常用的事件如下：</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>connection</td>
<td>客户端成功连接到服务器。</td>
</tr>
<tr>
<td>message</td>
<td>捕获客户端send信息。</td>
</tr>
<tr>
<td>disconnect</td>
<td>客户端断开连接。</td>
</tr>
<tr>
<td>error</td>
<td>发生错误。</td>
</tr>
</tbody>
</table>
<h2 id="客户端事件"><a href="#客户端事件" class="headerlink" title="客户端事件"></a>客户端事件</h2><p>较服务端而言，客户端提供更多的监听事件，在实时应用中，我们可以为这些事件注册监听并作出反应。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>connect</td>
<td>成功连接到服务器。</td>
</tr>
<tr>
<td>connecting</td>
<td>正在连接。</td>
</tr>
<tr>
<td>disconnect</td>
<td>断开连接。</td>
</tr>
<tr>
<td>connect_failed</td>
<td>连接失败。</td>
</tr>
<tr>
<td>error</td>
<td>连接错误。</td>
</tr>
<tr>
<td>message</td>
<td>监听服务端send的信息。</td>
</tr>
<tr>
<td>reconnect_failed</td>
<td>重新连接失败。</td>
</tr>
<tr>
<td>reconnect</td>
<td>重新连接成功。</td>
</tr>
<tr>
<td>reconnecting</td>
<td>正在重连。</td>
</tr>
</tbody>
</table>
<p>那么客户端socket发起连接时的顺序是怎么样的呢？当第一次连接时，事件触发顺序为：<code>connecting → connect</code><br>当失去连接时，事件触发顺序为：<code>disconnect → reconnecting →connecting → reconnect → connect</code></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间着实是一个非常实用好用的功能。我们可以通过命名空间，划分出不同的房间，在房间里的广播和通信都不会影响到房间以外的客户端。<br>在服务端，通过<code>of(&quot;&quot;)</code>的方式来划分新的命名空间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">io.of(<span class="string">'chat'</span>).on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>示例中，我们创建一个名为chat的房间，客户端可以通过如下方式连接到指定的房间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'/chat'</span>);</div></pre></td></tr></table></figure></p>
<p>虽然连接到指定的房间，但是我们也可以在服务端操作，自由的进出房间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">socket.join(<span class="string">'chat'</span>);<span class="comment">//进入chat房间</span></div><div class="line">socket.leave(<span class="string">'chat'</span>);<span class="comment">//离开chat房间</span></div></pre></td></tr></table></figure></p>
<h2 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h2><p>在实时应用中，广播是一个不可或缺的功能，socket.io提供两种服务端广播方式。<br>第一种广播方式可以称之为’全局广播’，顾名思义，全局广播就是所有连接到服务器的客户端都会受到广播的信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socket.broadcast.emit(<span class="string">'DATA'</span>,data);</div></pre></td></tr></table></figure></p>
<p>但是，在实际应用场景中，我们很多时候并不需要所有用户都收到广播信息，有的广播信息只发送给一部分客户端，比如某个房间里面的用户，那么可以使用如下方式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">socket.broadcast.to(<span class="string">'chat'</span>).emit(<span class="string">'DATA'</span>,data);</div></pre></td></tr></table></figure></p>
<p>当使用to()的方式广播信息时，只有该命名空间下的客户端才会收到广播信息，是不是很方便呢。</p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在很多应用场景中，客户端发起连接请求时都需要传递参数，这些参数可能是身份验证、初始化设置等等，那么socket.io发起连接时如何传递参数呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'/'</span>);</div></pre></td></tr></table></figure></p>
<p>由于connect函数发起连接的参数是一个url，你可能会想到把参数拼接到url上，如<code>http://xxxx?xx=xxxx</code>，但是很遗憾这样是行不通的，我们可以通过这样的方式来传递参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> socket = io.connect(<span class="string">'/'</span>,&#123; <span class="attr">_query</span>:<span class="string">'sid=123456'</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>在服务端可以这样获取到传递的参数:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">io.use(<span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> query = socket.request._query;</div><div class="line">     <span class="keyword">var</span> sid = query.sid; </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>客户端传递的参数已经被解析成了一个json对象，这个对象就是_query。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h2&gt;&lt;p&gt;WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。使用　WebSocket　，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道，两者之间就直接可以数据互相传送。而且它为我们实现即时服务带来了两大好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节省资源：互相沟通的Header是很小的-大概只有 2 Bytes。&lt;/li&gt;
&lt;li&gt;推送信息：不需要客户端请求，服务器可以主动传送数据给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Socket-io&quot;&gt;&lt;a href=&quot;#Socket-io&quot; class=&quot;headerlink&quot; title=&quot;Socket.io&quot;&gt;&lt;/a&gt;Socket.io&lt;/h2&gt;&lt;p&gt;Socket.IO是一个WebSocket库，包括了客户端的js和服务器端的nodejs，它的目标是构建可以在不同浏览器和移动设备上使用的实时应用。&lt;/p&gt;
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="实时通讯" scheme="http://yoursite.com/tags/%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    
      <category term="Socket" scheme="http://yoursite.com/tags/Socket/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>模块module.exports与实例化方法</title>
    <link href="http://yoursite.com/2016/12/21/%E6%A8%A1%E5%9D%97module-exports%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/12/21/模块module-exports与实例化方法/</id>
    <published>2016-12-21T08:43:24.000Z</published>
    <updated>2016-12-21T09:17:23.194Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中，提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。而在exports抛出的接口中，如果你希望你的模块就想为一个特别的对象类型，请使用<code>module.exports</code>；如果希望模块成为一个传统的模块实例，请使用exports.xx方法；<code>module.exports</code>才是真正的接口，exports只不过是它的一个辅助工具。最终返回给调用的是<code>module.exports</code>而不是exports。下面看代码；<br>首先来看<code>module.exports</code>，新建一个hello.js，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>可以看到，<code>module.exports</code>被赋予了一个构造函数；再新建一个main.js，其中引入hello.js这个模块，把exports方法接受进来，main.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello=<span class="built_in">require</span>(<span class="string">'./hello'</span>);</div><div class="line"><span class="keyword">var</span> hello=<span class="keyword">new</span> Hello(<span class="string">'jone'</span>,<span class="string">'24'</span>,<span class="string">'10000'</span>)</div><div class="line">hello.say();</div></pre></td></tr></table></figure>
<p>进入node环境，运行main.js，可以看到，已经打印出来：我的名字叫：jone，我今年24岁，月薪为：10000元；<br>而在hello.js中，我们是赋予了exports一个函数 ，当然，也可以采用匿名函数的方式；见代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=hello;</div></pre></td></tr></table></figure></p>
<p>以上<code>module.exports</code>，这个模块很明显是一个特别的对象模型；那如果采用对象实例的方法该如何实现呢？其实也很简单，只需要给exports对象赋值一个新的方法即可；见下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Hello=<span class="keyword">new</span> hello(<span class="string">'jone'</span>,<span class="string">'24'</span>,<span class="string">'10000'</span>);</div><div class="line">exports.add=Hello</div></pre></td></tr></table></figure>
<p>在hello.js中，依然是一个构造函数，声明了一个变量Hello，然后再把Hello赋值给exports自定义的add方法；那么在main.js中，由于add已经是exports的一个自定义的实例方法了，因此我们可以直接这么调用它：Hello.add.say()；见代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Hello=require(&apos;./hello&apos;);</div><div class="line">Hello.add.say()</div></pre></td></tr></table></figure></p>
<p>进行node环境，运行main.js，可以看到，结果和上面一样，都会输出：我的名字叫：jone，我今年24岁，月薪为：10000元；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在nodejs中，提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。而在exports抛出的接口中，如果你希望你的模块就想为一个特别的对象类型，请使用&lt;code&gt;module.exports&lt;/code&gt;；如果希望模块成为一个传统的模块实例，请使用exports.xx方法；&lt;code&gt;module.exports&lt;/code&gt;才是真正的接口，exports只不过是它的一个辅助工具。最终返回给调用的是&lt;code&gt;module.exports&lt;/code&gt;而不是exports。下面看代码；&lt;br&gt;首先来看&lt;code&gt;module.exports&lt;/code&gt;，新建一个hello.js，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,money&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.money=money;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.say=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;我的名字叫：&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name+&lt;span class=&quot;string&quot;&gt;&#39;，我今年&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age+&lt;span class=&quot;string&quot;&gt;&#39;岁，月薪为：&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.money+&lt;span class=&quot;string&quot;&gt;&#39;元；&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>D3入门总结</title>
    <link href="http://yoursite.com/2016/12/21/D3%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/21/D3入门总结/</id>
    <published>2016-12-21T08:19:38.000Z</published>
    <updated>2016-12-22T06:44:05.631Z</updated>
    
    <content type="html"><![CDATA[<p><code>D3.js</code> 是基于数据操作文档的 JavaScript 库，通过 HTML、SVG 和 CSS 赋予数据以生命。D3 集强力的可视化组件与数据驱动型的 DOM 操作手法于一身，能最大限度地引出现代浏览器的性能，而不必束缚于特定的框架。</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.select()</div></pre></td></tr></table></figure>
<p>选择所有指定元素的第一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.selectAll()</div></pre></td></tr></table></figure></p>
<p>选择指定元素的全部<br><a id="more"></a></p>
<h3 id="绑定元素"><a href="#绑定元素" class="headerlink" title="绑定元素"></a>绑定元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data()</div></pre></td></tr></table></figure>
<p>绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataum()</div></pre></td></tr></table></figure></p>
<p>绑定一个数据到选择集上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123; &#125;</div></pre></td></tr></table></figure></p>
<p>当选择集需要使用被绑定的数据时，常需要使用匿名函数。其包含两个参数，其中：<br>d 代表数据，也就是与某元素绑定的数据<br>i 代表索引，代表数据的索引号，从 0 开始</p>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">append()</div></pre></td></tr></table></figure>
<p>在选择集末尾插入元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert()</div></pre></td></tr></table></figure>
<p>在选择集前面插入元素</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remove()</div></pre></td></tr></table></figure>
<h3 id="添加画布"><a href="#添加画布" class="headerlink" title="添加画布"></a>添加画布</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)     <span class="comment">//选择文档中的body元素</span></div><div class="line">            .append(<span class="string">"svg"</span>)  <span class="comment">//添加一个svg元素</span></div><div class="line">            .attr(<span class="string">"width"</span>, <span class="number">300</span>)  <span class="comment">//设定宽度</span></div><div class="line">            .attr(<span class="string">"height"</span>, <span class="number">300</span>); <span class="comment">//设定高度</span></div></pre></td></tr></table></figure>
<h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">250</span> , <span class="number">210</span> , <span class="number">170</span> , <span class="number">130</span> , <span class="number">90</span> ]; </div><div class="line">svg.selectAll(<span class="string">"rect"</span>)   <span class="comment">//选择svg内所有的矩形</span></div><div class="line">   .data(dataset)  <span class="comment">//绑定数组</span></div><div class="line">   .enter()        <span class="comment">//指定选择集的enter部分</span></div><div class="line">   .append(<span class="string">"rect"</span>) <span class="comment">//添加足够数量的矩形元素</span></div></pre></td></tr></table></figure>
<p>有数据，而没有足够图形元素的时候，使用此方法可以添加足够的元素。</p>
<p>矩形的属性，常用的有四个：</p>
<ul>
<li>x - 矩形左上角的 x 坐标</li>
<li>y - 矩形左上角的 y 坐标</li>
<li>width - 矩形的宽度</li>
<li>height - 矩形的高度</li>
</ul>
<p>注意，在 SVG 中，x 轴的正方向是水平向右，y 轴的正方向是垂直向下的。</p>
<h3 id="比例尺缩放"><a href="#比例尺缩放" class="headerlink" title="比例尺缩放"></a>比例尺缩放</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.scale.linear()</div></pre></td></tr></table></figure>
<p>返回一个线性比例尺<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">domain()</div><div class="line">range()</div></pre></td></tr></table></figure></p>
<p>设定比例尺的定义域和值域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d3.max()</div><div class="line">d3.min()</div></pre></td></tr></table></figure></p>
<p>求数组的最大值和最小值</p>
<h4 id="线性比例尺"><a href="#线性比例尺" class="headerlink" title="线性比例尺"></a>线性比例尺</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">0.9</span>, <span class="number">1.5</span>, <span class="number">3.3</span>];</div><div class="line"><span class="keyword">var</span> min = d3.min(dataset);</div><div class="line"><span class="keyword">var</span> max = d3.max(dataset);</div><div class="line"></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">               .domain([min, max])</div><div class="line">               .range([<span class="number">0</span>, <span class="number">300</span>]);</div><div class="line">               </div><div class="line">linear(<span class="number">0.9</span>);    <span class="comment">//返回 0</span></div><div class="line">linear(<span class="number">2.3</span>);    <span class="comment">//返回 175</span></div><div class="line">linear(<span class="number">3.3</span>);    <span class="comment">//返回 300</span></div></pre></td></tr></table></figure>
<p>上面的方法将dataset中最小的值，映射成0；将最大的值，映射成 300。</p>
<p>d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，有这样的用法：linear(2.3)，返回175。</p>
<h4 id="序数比例尺"><a href="#序数比例尺" class="headerlink" title="序数比例尺"></a>序数比例尺</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> index = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> color = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> ordinal = d3.scale.ordinal()</div><div class="line">                .domain(index)</div><div class="line">                .range(color);</div><div class="line"></div><div class="line">ordinal(<span class="number">0</span>); <span class="comment">//返回 red</span></div><div class="line">ordinal(<span class="number">2</span>); <span class="comment">//返回 green</span></div><div class="line">ordinal(<span class="number">4</span>); <span class="comment">//返回 black</span></div></pre></td></tr></table></figure>
<h3 id="定义坐标轴"><a href="#定义坐标轴" class="headerlink" title="定义坐标轴"></a>定义坐标轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.svg.axis()</div></pre></td></tr></table></figure>
<p>D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素。</p>
<p>要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">2.5</span> , <span class="number">2.1</span> , <span class="number">1.7</span> , <span class="number">1.3</span> , <span class="number">0.9</span> ];</div><div class="line"><span class="comment">//定义比例尺</span></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">      .domain([<span class="number">0</span>, d3.max(dataset)])</div><div class="line">      .range([<span class="number">0</span>, <span class="number">250</span>]);</div><div class="line"><span class="comment">//定义坐标轴</span></div><div class="line"><span class="keyword">var</span> axis = d3.svg.axis()</div><div class="line">             .scale(linear)     <span class="comment">//指定比例尺</span></div><div class="line">             .orient(<span class="string">"bottom"</span>)  <span class="comment">//指定刻度的方向</span></div><div class="line">             .ticks(<span class="number">7</span>);          <span class="comment">//指定刻度的数量</span></div></pre></td></tr></table></figure></p>
<ul>
<li>scale()：指定比例尺。</li>
<li>orient()：指定刻度的朝向，bottom 表示在坐标轴的下方显示。</li>
<li>ticks()：指定刻度的数量。</li>
</ul>
<p>定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svg.append(<span class="string">"g"</span>).call(axis);</div></pre></td></tr></table></figure></p>
<p>在 D3 中，call() 的参数是一个函数,调用之后，将当前的选择集作为参数传递给此函数</p>
<h2 id="完整的柱形图"><a href="#完整的柱形图" class="headerlink" title="完整的柱形图"></a>完整的柱形图</h2><img src="/2016/12/21/D3入门总结/test.png" alt="test.png" title="">
<h3 id="添加-SVG-画布"><a href="#添加-SVG-画布" class="headerlink" title="添加 SVG 画布"></a>添加 SVG 画布</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">400</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">400</span>;</div><div class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">left</span>:<span class="number">30</span>, <span class="attr">right</span>:<span class="number">30</span>, <span class="attr">top</span>:<span class="number">20</span>, <span class="attr">bottom</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="comment">//在 body 里添加一个 SVG 画布   </span></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</div><div class="line">    .append(<span class="string">"svg"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, width)</div><div class="line">    .attr(<span class="string">"height"</span>, height);</div></pre></td></tr></table></figure>
<h3 id="定义数据和比例尺"><a href="#定义数据和比例尺" class="headerlink" title="定义数据和比例尺"></a>定义数据和比例尺</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">//x轴的比例尺</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</div><div class="line">    .domain(d3.range(dataset.length))</div><div class="line">    .rangeRoundBands([<span class="number">0</span>, width - padding.left - padding.right]);</div><div class="line"><span class="comment">//y轴的比例尺</span></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>,d3.max(dataset)])</div><div class="line">    .range([height - padding.top - padding.bottom, <span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h3 id="定义坐标轴-1"><a href="#定义坐标轴-1" class="headerlink" title="定义坐标轴"></a>定义坐标轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义x轴</span></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">    .scale(xScale)</div><div class="line">    .orient(<span class="string">"bottom"</span>);</div><div class="line">        </div><div class="line"><span class="comment">//定义y轴</span></div><div class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">    .scale(yScale)</div><div class="line">    .orient(<span class="string">"left"</span>);</div></pre></td></tr></table></figure>
<h3 id="添加矩形和文字元素"><a href="#添加矩形和文字元素" class="headerlink" title="添加矩形和文字元素"></a>添加矩形和文字元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//矩形之间的空白</span></div><div class="line"><span class="keyword">var</span> rectPadding = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">//添加矩形元素</span></div><div class="line"><span class="keyword">var</span> rects = svg.selectAll(<span class="string">".MyRect"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"rect"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"MyRect"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> xScale(i) + rectPadding/<span class="number">2</span>;</div><div class="line">        &#125; )</div><div class="line">        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> yScale(d);</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"width"</span>, xScale.rangeBand() - rectPadding )</div><div class="line">        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> height - padding.top - padding.bottom - yScale(d);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//添加文字元素</span></div><div class="line"><span class="keyword">var</span> texts = svg.selectAll(<span class="string">".MyText"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"text"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"MyText"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> xScale(i) + rectPadding/<span class="number">2</span>;</div><div class="line">        &#125; )</div><div class="line">        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> yScale(d);</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"dx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> (xScale.rangeBand() - rectPadding)/<span class="number">2</span>;</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"dy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">        &#125;)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> d;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="添加坐标轴的元素"><a href="#添加坐标轴的元素" class="headerlink" title="添加坐标轴的元素"></a>添加坐标轴的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加x轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">  .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">  .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + (height - padding.bottom) + <span class="string">")"</span>)</div><div class="line">  .call(xAxis); </div><div class="line">        </div><div class="line"><span class="comment">//添加y轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">  .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">  .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">  .call(yAxis);</div></pre></td></tr></table></figure>
<h2 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transition()</div></pre></td></tr></table></figure>
<p>启动过渡效果。</p>
<p>其前后是图形变化前后的状态（形状、位置、颜色等等）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duration()</div></pre></td></tr></table></figure></p>
<p>指定过渡的持续时间，单位为毫秒。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ease()</div></pre></td></tr></table></figure></p>
<p>指定过渡的方式，常用的有：</p>
<ul>
<li>linear：普通的线性变化</li>
<li>circle：慢慢地到达变换的最终状态</li>
<li>elastic：带有弹跳的到达最终状态</li>
<li>bounce：在最终状态处弹跳几次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delay()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。</p>
<h2 id="Update、Enter、Exit"><a href="#Update、Enter、Exit" class="headerlink" title="Update、Enter、Exit"></a>Update、Enter、Exit</h2><p>如果数组为 [3, 6, 9, 12, 15]，将此数组绑定到3个 p 元素的选择集上。可以想象，会有两个数据没有元素与之对应，这时候 D3 会建立两个空的元素与数据对应，这一部分就称为 Enter。而有元素与数据对应的部分称为 Update。</p>
<p>如果数组为 [3]，则会有两个元素没有数据绑定，那么没有数据绑定的部分被称为 Exit。<br><br><img src="/2016/12/21/D3入门总结/2.png" alt="2.png" title=""></p>
<ul>
<li>update 部分的处理办法一般是：更新属性值</li>
<li>enter 部分的处理办法一般是：添加元素后，赋予属性值</li>
<li>exit 部分的处理办法一般是：删除元素（remove）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;D3.js&lt;/code&gt; 是基于数据操作文档的 JavaScript 库，通过 HTML、SVG 和 CSS 赋予数据以生命。D3 集强力的可视化组件与数据驱动型的 DOM 操作手法于一身，能最大限度地引出现代浏览器的性能，而不必束缚于特定的框架。&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;选择元素&quot;&gt;&lt;a href=&quot;#选择元素&quot; class=&quot;headerlink&quot; title=&quot;选择元素&quot;&gt;&lt;/a&gt;选择元素&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;d3.select()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选择所有指定元素的第一个&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;d3.selectAll()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择指定元素的全部&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="D3" scheme="http://yoursite.com/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>移动端手势库Hammer.js</title>
    <link href="http://yoursite.com/2016/12/18/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E5%8A%BF%E5%BA%93Hammer-js/"/>
    <id>http://yoursite.com/2016/12/18/移动端手势库Hammer-js/</id>
    <published>2016-12-18T14:25:49.000Z</published>
    <updated>2016-12-21T08:03:13.089Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/hammerjs/hammer.js/tree/master/" target="_blank" rel="external">Github</a></p>
<p>Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入hammer.js到文件中，并创建一个新的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(Element, Options);</div><div class="line">hammer.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(ev);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>hammerjs内置多种手势识别器，包括 </p>
<ul>
<li>tap：轻触，与click相比有300ms的延迟</li>
<li>doubletap：双点击</li>
<li>press：按住,最小按压时间为500毫秒</li>
<li>pan：拖动平移<ul>
<li>panstart：拖动开始</li>
<li>panmove：拖动过程</li>
<li>panend：拖动结束</li>
<li>pancancel：拖动取消</li>
<li>panleft：向左拖动</li>
<li>panright：向右拖动</li>
<li>panup：向上拖动</li>
<li>pandown：向下拖动</li>
</ul>
</li>
<li>swipe：快速滑动<ul>
<li>swipeleft：向左滑动</li>
<li>swiperight：向右滑动</li>
<li>swipeup：向上滑动</li>
<li>swipedown：向下滑动</li>
</ul>
</li>
<li>pinch：多触点捏放<ul>
<li>pinchstart：多点触控开始</li>
<li>pinchmove：多点触控过程</li>
<li>pinchend：多点触控结束</li>
<li>pinchcancel：多点触控取消</li>
<li>pinchin：多点触控时两手指距离越来越近</li>
<li>pinchout：多点触控时两手指距离越来越远</li>
</ul>
</li>
<li>rotate：旋转识别器<ul>
<li>rotatestart：旋转开始</li>
<li>rotatemove：旋转过程</li>
<li>rotateend：旋转结束</li>
<li>rotatecancel：旋转取消</li>
</ul>
</li>
</ul>
<p>其中 pinch 和 rotate 默认是不可用的，想启用它们，需要加上：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hammer.get(<span class="string">'pinch'</span>).set(&#123; <span class="attr">enable</span>: <span class="literal">true</span> &#125;);</div><div class="line">hammer.get(<span class="string">'rotate'</span>).set(&#123; <span class="attr">enable</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure>
<p>pan 和 swipe默认只识别水平方位的手势，若要允许识别器识别垂直方位或全部方位的 pan 和 swipe，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hammer.get(<span class="string">'pan'</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_ALL &#125;);</div><div class="line">hammer.get(<span class="string">'swipe'</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_VERTICAL &#125;);</div></pre></td></tr></table></figure>
<p>另建议加上如下meta标签，防止doubletap 或 pinch 缩放了viewport：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>事件对象</strong></p>
<p>每一个Hammer触发的事件都会收到一个包含了如下属性的事件对象：<br><img src="/2016/12/18/移动端手势库Hammer-js/hammer-events.png" alt="hammer-events.png" title=""></p>
<p><strong>on(events, handler) 和 .off(events, [handler])</strong></p>
<p>监听由被添加的识别器触发的事件，或者移除那些绑定了的事件。参数中将事件通过空格隔开可处理多个事件</p>
<h2 id="在jQuery基础上使用"><a href="#在jQuery基础上使用" class="headerlink" title="在jQuery基础上使用"></a>在jQuery基础上使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#element"</span>).hammer(&#123;</div><div class="line">    <span class="comment">// 对DOM进行一些初始化，这里可以加入一些参数</span></div><div class="line">   &#125;)</div><div class="line">   .on(<span class="string">"tap"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(ev);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/hammerjs/hammer.js/tree/master/&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;引入hammer.js到文件中，并创建一个新的实例：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hammer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hammer(Element, Options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hammer.on(&lt;span class=&quot;string&quot;&gt;&#39;tap&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ev&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ev);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="手势库" scheme="http://yoursite.com/tags/%E6%89%8B%E5%8A%BF%E5%BA%93/"/>
    
      <category term="hammer" scheme="http://yoursite.com/tags/hammer/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客命令</title>
    <link href="http://yoursite.com/2016/12/10/hello-world/"/>
    <id>http://yoursite.com/2016/12/10/hello-world/</id>
    <published>2016-12-10T08:22:10.000Z</published>
    <updated>2017-04-14T06:14:47.422Z</updated>
    
    <content type="html"><![CDATA[<p>写在第一页，作为建立个人博客的第一篇文章，使用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>搭建，记录日常使用的常用命令。<br>本博客使用品<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>主题。精于心，简于形</p>
<a id="more"></a>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<h3 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">"My New Page"</span></div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/generating.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">更多信息</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在第一页，作为建立个人博客的第一篇文章，使用&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;搭建，记录日常使用的常用命令。&lt;br&gt;本博客使用品&lt;a href=&quot;http://theme-next.iissnan.com/&quot;&gt;Next&lt;/a&gt;主题。精于心，简于形&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
