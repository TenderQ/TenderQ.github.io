<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋意浓的小站</title>
  <subtitle>Web developer</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-21T09:17:23.194Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>秋意浓</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模块module.exports与实例化方法</title>
    <link href="http://yoursite.com/2016/12/21/%E6%A8%A1%E5%9D%97module-exports%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/12/21/模块module-exports与实例化方法/</id>
    <published>2016-12-21T08:43:24.000Z</published>
    <updated>2016-12-21T09:17:23.194Z</updated>
    
    <content type="html"><![CDATA[<p>在nodejs中，提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。而在exports抛出的接口中，如果你希望你的模块就想为一个特别的对象类型，请使用<code>module.exports</code>；如果希望模块成为一个传统的模块实例，请使用exports.xx方法；<code>module.exports</code>才是真正的接口，exports只不过是它的一个辅助工具。最终返回给调用的是<code>module.exports</code>而不是exports。下面看代码；<br>首先来看<code>module.exports</code>，新建一个hello.js，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>可以看到，<code>module.exports</code>被赋予了一个构造函数；再新建一个main.js，其中引入hello.js这个模块，把exports方法接受进来，main.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Hello=<span class="built_in">require</span>(<span class="string">'./hello'</span>);</div><div class="line"><span class="keyword">var</span> hello=<span class="keyword">new</span> Hello(<span class="string">'jone'</span>,<span class="string">'24'</span>,<span class="string">'10000'</span>)</div><div class="line">hello.say();</div></pre></td></tr></table></figure>
<p>进入node环境，运行main.js，可以看到，已经打印出来：我的名字叫：jone，我今年24岁，月薪为：10000元；<br>而在hello.js中，我们是赋予了exports一个函数 ，当然，也可以采用匿名函数的方式；见代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports=hello;</div></pre></td></tr></table></figure></p>
<p>以上<code>module.exports</code>，这个模块很明显是一个特别的对象模型；那如果采用对象实例的方法该如何实现呢？其实也很简单，只需要给exports对象赋值一个新的方法即可；见下面代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name,age,money</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name=name;</div><div class="line">        <span class="keyword">this</span>.age=age;</div><div class="line">        <span class="keyword">this</span>.money=money;</div><div class="line">        <span class="keyword">this</span>.say=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'我的名字叫：'</span>+<span class="keyword">this</span>.name+<span class="string">'，我今年'</span>+<span class="keyword">this</span>.age+<span class="string">'岁，月薪为：'</span>+<span class="keyword">this</span>.money+<span class="string">'元；'</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Hello=<span class="keyword">new</span> hello(<span class="string">'jone'</span>,<span class="string">'24'</span>,<span class="string">'10000'</span>);</div><div class="line">exports.add=Hello</div></pre></td></tr></table></figure>
<p>在hello.js中，依然是一个构造函数，声明了一个变量Hello，然后再把Hello赋值给exports自定义的add方法；那么在main.js中，由于add已经是exports的一个自定义的实例方法了，因此我们可以直接这么调用它：Hello.add.say()；见代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Hello=require(&apos;./hello&apos;);</div><div class="line">Hello.add.say()</div></pre></td></tr></table></figure></p>
<p>进行node环境，运行main.js，可以看到，结果和上面一样，都会输出：我的名字叫：jone，我今年24岁，月薪为：10000元；</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在nodejs中，提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。而在exports抛出的接口中，如果你希望你的模块就想为一个特别的对象类型，请使用&lt;code&gt;module.exports&lt;/code&gt;；如果希望模块成为一个传统的模块实例，请使用exports.xx方法；&lt;code&gt;module.exports&lt;/code&gt;才是真正的接口，exports只不过是它的一个辅助工具。最终返回给调用的是&lt;code&gt;module.exports&lt;/code&gt;而不是exports。下面看代码；&lt;br&gt;首先来看&lt;code&gt;module.exports&lt;/code&gt;，新建一个hello.js，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,money&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.money=money;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.say=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;我的名字叫：&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name+&lt;span class=&quot;string&quot;&gt;&#39;，我今年&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age+&lt;span class=&quot;string&quot;&gt;&#39;岁，月薪为：&#39;&lt;/span&gt;+&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.money+&lt;span class=&quot;string&quot;&gt;&#39;元；&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="NodeJs" scheme="http://yoursite.com/categories/NodeJs/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>D3入门总结</title>
    <link href="http://yoursite.com/2016/12/21/D3%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/12/21/D3入门总结/</id>
    <published>2016-12-21T08:19:38.000Z</published>
    <updated>2016-12-21T08:34:22.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.select()</div></pre></td></tr></table></figure>
<p>选择所有指定元素的第一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.selectAll()</div></pre></td></tr></table></figure></p>
<p>选择指定元素的全部<br><a id="more"></a></p>
<h3 id="绑定元素"><a href="#绑定元素" class="headerlink" title="绑定元素"></a>绑定元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data()</div></pre></td></tr></table></figure>
<p>绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dataum()</div></pre></td></tr></table></figure></p>
<p>绑定一个数据到选择集上<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">d, i</span>)</span>&#123; &#125;</div></pre></td></tr></table></figure></p>
<p>当选择集需要使用被绑定的数据时，常需要使用匿名函数。其包含两个参数，其中：<br>d 代表数据，也就是与某元素绑定的数据<br>i 代表索引，代表数据的索引号，从 0 开始</p>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">append()</div></pre></td></tr></table></figure>
<p>在选择集末尾插入元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">insert()</div></pre></td></tr></table></figure>
<p>在选择集前面插入元素</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">remove()</div></pre></td></tr></table></figure>
<h3 id="添加画布"><a href="#添加画布" class="headerlink" title="添加画布"></a>添加画布</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)     <span class="comment">//选择文档中的body元素</span></div><div class="line">            .append(<span class="string">"svg"</span>)  <span class="comment">//添加一个svg元素</span></div><div class="line">            .attr(<span class="string">"width"</span>, <span class="number">300</span>)  <span class="comment">//设定宽度</span></div><div class="line">            .attr(<span class="string">"height"</span>, <span class="number">300</span>); <span class="comment">//设定高度</span></div></pre></td></tr></table></figure>
<h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">250</span> , <span class="number">210</span> , <span class="number">170</span> , <span class="number">130</span> , <span class="number">90</span> ]; </div><div class="line">svg.selectAll(<span class="string">"rect"</span>)   <span class="comment">//选择svg内所有的矩形</span></div><div class="line">   .data(dataset)  <span class="comment">//绑定数组</span></div><div class="line">   .enter()        <span class="comment">//指定选择集的enter部分</span></div><div class="line">   .append(<span class="string">"rect"</span>) <span class="comment">//添加足够数量的矩形元素</span></div></pre></td></tr></table></figure>
<p>有数据，而没有足够图形元素的时候，使用此方法可以添加足够的元素。</p>
<p>矩形的属性，常用的有四个：</p>
<ul>
<li>x - 矩形左上角的 x 坐标</li>
<li>y - 矩形左上角的 y 坐标</li>
<li>width - 矩形的宽度</li>
<li>height - 矩形的高度</li>
</ul>
<p>注意，在 SVG 中，x 轴的正方向是水平向右，y 轴的正方向是垂直向下的。</p>
<h3 id="比例尺缩放"><a href="#比例尺缩放" class="headerlink" title="比例尺缩放"></a>比例尺缩放</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.scale.linear()</div></pre></td></tr></table></figure>
<p>返回一个线性比例尺<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">domain()</div><div class="line">range()</div></pre></td></tr></table></figure></p>
<p>设定比例尺的定义域和值域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d3.max()</div><div class="line">d3.min()</div></pre></td></tr></table></figure></p>
<p>求数组的最大值和最小值</p>
<h4 id="线性比例尺"><a href="#线性比例尺" class="headerlink" title="线性比例尺"></a>线性比例尺</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">0.9</span>, <span class="number">1.5</span>, <span class="number">3.3</span>];</div><div class="line"><span class="keyword">var</span> min = d3.min(dataset);</div><div class="line"><span class="keyword">var</span> max = d3.max(dataset);</div><div class="line"></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">               .domain([min, max])</div><div class="line">               .range([<span class="number">0</span>, <span class="number">300</span>]);</div><div class="line">               </div><div class="line">linear(<span class="number">0.9</span>);    <span class="comment">//返回 0</span></div><div class="line">linear(<span class="number">2.3</span>);    <span class="comment">//返回 175</span></div><div class="line">linear(<span class="number">3.3</span>);    <span class="comment">//返回 300</span></div></pre></td></tr></table></figure>
<p>上面的方法将dataset中最小的值，映射成0；将最大的值，映射成 300。</p>
<p>d3.scale.linear() 的返回值，是可以当做函数来使用的。因此，有这样的用法：linear(2.3)，返回175。</p>
<h4 id="序数比例尺"><a href="#序数比例尺" class="headerlink" title="序数比例尺"></a>序数比例尺</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> index = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> color = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>, <span class="string">"yellow"</span>, <span class="string">"black"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> ordinal = d3.scale.ordinal()</div><div class="line">                .domain(index)</div><div class="line">                .range(color);</div><div class="line"></div><div class="line">ordinal(<span class="number">0</span>); <span class="comment">//返回 red</span></div><div class="line">ordinal(<span class="number">2</span>); <span class="comment">//返回 green</span></div><div class="line">ordinal(<span class="number">4</span>); <span class="comment">//返回 black</span></div></pre></td></tr></table></figure>
<h3 id="定义坐标轴"><a href="#定义坐标轴" class="headerlink" title="定义坐标轴"></a>定义坐标轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d3.svg.axis()</div></pre></td></tr></table></figure>
<p>D3 中坐标轴的组件，能够在 SVG 中生成组成坐标轴的元素。</p>
<p>要生成坐标轴，需要用到比例尺，它们二者经常是一起使用的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [ <span class="number">2.5</span> , <span class="number">2.1</span> , <span class="number">1.7</span> , <span class="number">1.3</span> , <span class="number">0.9</span> ];</div><div class="line"><span class="comment">//定义比例尺</span></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">      .domain([<span class="number">0</span>, d3.max(dataset)])</div><div class="line">      .range([<span class="number">0</span>, <span class="number">250</span>]);</div><div class="line"><span class="comment">//定义坐标轴</span></div><div class="line"><span class="keyword">var</span> axis = d3.svg.axis()</div><div class="line">             .scale(linear)     <span class="comment">//指定比例尺</span></div><div class="line">             .orient(<span class="string">"bottom"</span>)  <span class="comment">//指定刻度的方向</span></div><div class="line">             .ticks(<span class="number">7</span>);          <span class="comment">//指定刻度的数量</span></div></pre></td></tr></table></figure></p>
<ul>
<li>scale()：指定比例尺。</li>
<li>orient()：指定刻度的朝向，bottom 表示在坐标轴的下方显示。</li>
<li>ticks()：指定刻度的数量。</li>
</ul>
<p>定义了坐标轴之后，只需要在 SVG 中添加一个分组元素 ，再将坐标轴的其他元素添加到这个 里即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svg.append(<span class="string">"g"</span>).call(axis);</div></pre></td></tr></table></figure></p>
<p>在 D3 中，call() 的参数是一个函数,调用之后，将当前的选择集作为参数传递给此函数</p>
<h2 id="完整的柱形图"><a href="#完整的柱形图" class="headerlink" title="完整的柱形图"></a>完整的柱形图</h2><img src="/2016/12/21/D3入门总结/test.png" alt="test.png" title="">
<h3 id="添加-SVG-画布"><a href="#添加-SVG-画布" class="headerlink" title="添加 SVG 画布"></a>添加 SVG 画布</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">400</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">400</span>;</div><div class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">left</span>:<span class="number">30</span>, <span class="attr">right</span>:<span class="number">30</span>, <span class="attr">top</span>:<span class="number">20</span>, <span class="attr">bottom</span>:<span class="number">20</span>&#125;;</div><div class="line"><span class="comment">//在 body 里添加一个 SVG 画布   </span></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</div><div class="line">    .append(<span class="string">"svg"</span>)</div><div class="line">    .attr(<span class="string">"width"</span>, width)</div><div class="line">    .attr(<span class="string">"height"</span>, height);</div></pre></td></tr></table></figure>
<h3 id="定义数据和比例尺"><a href="#定义数据和比例尺" class="headerlink" title="定义数据和比例尺"></a>定义数据和比例尺</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">33</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">5</span>];</div><div class="line"><span class="comment">//x轴的比例尺</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</div><div class="line">    .domain(d3.range(dataset.length))</div><div class="line">    .rangeRoundBands([<span class="number">0</span>, width - padding.left - padding.right]);</div><div class="line"><span class="comment">//y轴的比例尺</span></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">    .domain([<span class="number">0</span>,d3.max(dataset)])</div><div class="line">    .range([height - padding.top - padding.bottom, <span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h3 id="定义坐标轴-1"><a href="#定义坐标轴-1" class="headerlink" title="定义坐标轴"></a>定义坐标轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义x轴</span></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">    .scale(xScale)</div><div class="line">    .orient(<span class="string">"bottom"</span>);</div><div class="line">        </div><div class="line"><span class="comment">//定义y轴</span></div><div class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">    .scale(yScale)</div><div class="line">    .orient(<span class="string">"left"</span>);</div></pre></td></tr></table></figure>
<h3 id="添加矩形和文字元素"><a href="#添加矩形和文字元素" class="headerlink" title="添加矩形和文字元素"></a>添加矩形和文字元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//矩形之间的空白</span></div><div class="line"><span class="keyword">var</span> rectPadding = <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">//添加矩形元素</span></div><div class="line"><span class="keyword">var</span> rects = svg.selectAll(<span class="string">".MyRect"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"rect"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"MyRect"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> xScale(i) + rectPadding/<span class="number">2</span>;</div><div class="line">        &#125; )</div><div class="line">        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> yScale(d);</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"width"</span>, xScale.rangeBand() - rectPadding )</div><div class="line">        .attr(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> height - padding.top - padding.bottom - yScale(d);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//添加文字元素</span></div><div class="line"><span class="keyword">var</span> texts = svg.selectAll(<span class="string">".MyText"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"text"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"MyText"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">        .attr(<span class="string">"x"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> xScale(i) + rectPadding/<span class="number">2</span>;</div><div class="line">        &#125; )</div><div class="line">        .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> yScale(d);</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"dx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> (xScale.rangeBand() - rectPadding)/<span class="number">2</span>;</div><div class="line">        &#125;)</div><div class="line">        .attr(<span class="string">"dy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">20</span>;</div><div class="line">        &#125;)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> d;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="添加坐标轴的元素"><a href="#添加坐标轴的元素" class="headerlink" title="添加坐标轴的元素"></a>添加坐标轴的元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加x轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">  .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">  .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + (height - padding.bottom) + <span class="string">")"</span>)</div><div class="line">  .call(xAxis); </div><div class="line">        </div><div class="line"><span class="comment">//添加y轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">  .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">  .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span> + padding.left + <span class="string">","</span> + padding.top + <span class="string">")"</span>)</div><div class="line">  .call(yAxis);</div></pre></td></tr></table></figure>
<h2 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transition()</div></pre></td></tr></table></figure>
<p>启动过渡效果。</p>
<p>其前后是图形变化前后的状态（形状、位置、颜色等等）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duration()</div></pre></td></tr></table></figure></p>
<p>指定过渡的持续时间，单位为毫秒。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ease()</div></pre></td></tr></table></figure></p>
<p>指定过渡的方式，常用的有：</p>
<ul>
<li>linear：普通的线性变化</li>
<li>circle：慢慢地到达变换的最终状态</li>
<li>elastic：带有弹跳的到达最终状态</li>
<li>bounce：在最终状态处弹跳几次<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">delay()</div></pre></td></tr></table></figure>
</li>
</ul>
<p>指定延迟的时间，表示一定时间后才开始转变，单位同样为毫秒。此函数可以对整体指定延迟，也可以对个别指定延迟。</p>
<h2 id="Update、Enter、Exit"><a href="#Update、Enter、Exit" class="headerlink" title="Update、Enter、Exit"></a>Update、Enter、Exit</h2><p>如果数组为 [3, 6, 9, 12, 15]，将此数组绑定到3个 p 元素的选择集上。可以想象，会有两个数据没有元素与之对应，这时候 D3 会建立两个空的元素与数据对应，这一部分就称为 Enter。而有元素与数据对应的部分称为 Update。</p>
<p>如果数组为 [3]，则会有两个元素没有数据绑定，那么没有数据绑定的部分被称为 Exit。<br><br><img src="/2016/12/21/D3入门总结/2.png" alt="2.png" title=""></p>
<ul>
<li>update 部分的处理办法一般是：更新属性值</li>
<li>enter 部分的处理办法一般是：添加元素后，赋予属性值</li>
<li>exit 部分的处理办法一般是：删除元素（remove）</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;选择元素&quot;&gt;&lt;a href=&quot;#选择元素&quot; class=&quot;headerlink&quot; title=&quot;选择元素&quot;&gt;&lt;/a&gt;选择元素&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;d3.select()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选择所有指定元素的第一个&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;d3.selectAll()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择指定元素的全部&lt;br&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="D3" scheme="http://yoursite.com/tags/D3/"/>
    
  </entry>
  
  <entry>
    <title>移动端手势库Hammer.js</title>
    <link href="http://yoursite.com/2016/12/18/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E5%8A%BF%E5%BA%93Hammer-js/"/>
    <id>http://yoursite.com/2016/12/18/移动端手势库Hammer-js/</id>
    <published>2016-12-18T14:25:49.000Z</published>
    <updated>2016-12-21T08:03:13.089Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/hammerjs/hammer.js/tree/master/" target="_blank" rel="external">Github</a></p>
<p>Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>引入hammer.js到文件中，并创建一个新的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hammer = <span class="keyword">new</span> Hammer(Element, Options);</div><div class="line">hammer.on(<span class="string">'tap'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(ev);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>hammerjs内置多种手势识别器，包括 </p>
<ul>
<li>tap：轻触，与click相比有300ms的延迟</li>
<li>doubletap：双点击</li>
<li>press：按住,最小按压时间为500毫秒</li>
<li>pan：拖动平移<ul>
<li>panstart：拖动开始</li>
<li>panmove：拖动过程</li>
<li>panend：拖动结束</li>
<li>pancancel：拖动取消</li>
<li>panleft：向左拖动</li>
<li>panright：向右拖动</li>
<li>panup：向上拖动</li>
<li>pandown：向下拖动</li>
</ul>
</li>
<li>swipe：快速滑动<ul>
<li>swipeleft：向左滑动</li>
<li>swiperight：向右滑动</li>
<li>swipeup：向上滑动</li>
<li>swipedown：向下滑动</li>
</ul>
</li>
<li>pinch：多触点捏放<ul>
<li>pinchstart：多点触控开始</li>
<li>pinchmove：多点触控过程</li>
<li>pinchend：多点触控结束</li>
<li>pinchcancel：多点触控取消</li>
<li>pinchin：多点触控时两手指距离越来越近</li>
<li>pinchout：多点触控时两手指距离越来越远</li>
</ul>
</li>
<li>rotate：旋转识别器<ul>
<li>rotatestart：旋转开始</li>
<li>rotatemove：旋转过程</li>
<li>rotateend：旋转结束</li>
<li>rotatecancel：旋转取消</li>
</ul>
</li>
</ul>
<p>其中 pinch 和 rotate 默认是不可用的，想启用它们，需要加上：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hammer.get(<span class="string">'pinch'</span>).set(&#123; <span class="attr">enable</span>: <span class="literal">true</span> &#125;);</div><div class="line">hammer.get(<span class="string">'rotate'</span>).set(&#123; <span class="attr">enable</span>: <span class="literal">true</span> &#125;);</div></pre></td></tr></table></figure>
<p>pan 和 swipe默认只识别水平方位的手势，若要允许识别器识别垂直方位或全部方位的 pan 和 swipe，可以这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hammer.get(<span class="string">'pan'</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_ALL &#125;);</div><div class="line">hammer.get(<span class="string">'swipe'</span>).set(&#123; <span class="attr">direction</span>: Hammer.DIRECTION_VERTICAL &#125;);</div></pre></td></tr></table></figure>
<p>另建议加上如下meta标签，防止doubletap 或 pinch 缩放了viewport：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>事件对象</strong></p>
<p>每一个Hammer触发的事件都会收到一个包含了如下属性的事件对象：<br><img src="/2016/12/18/移动端手势库Hammer-js/hammer-events.png" alt="hammer-events.png" title=""></p>
<p><strong>on(events, handler) 和 .off(events, [handler])</strong></p>
<p>监听由被添加的识别器触发的事件，或者移除那些绑定了的事件。参数中将事件通过空格隔开可处理多个事件</p>
<h2 id="在jQuery基础上使用"><a href="#在jQuery基础上使用" class="headerlink" title="在jQuery基础上使用"></a>在jQuery基础上使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#element"</span>).hammer(&#123;</div><div class="line">    <span class="comment">// 对DOM进行一些初始化，这里可以加入一些参数</span></div><div class="line">   &#125;)</div><div class="line">   .on(<span class="string">"tap"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(ev);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/hammerjs/hammer.js/tree/master/&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;引入hammer.js到文件中，并创建一个新的实例：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hammer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Hammer(Element, Options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hammer.on(&lt;span class=&quot;string&quot;&gt;&#39;tap&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ev&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ev);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Js" scheme="http://yoursite.com/categories/Js/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="手势库" scheme="http://yoursite.com/tags/%E6%89%8B%E5%8A%BF%E5%BA%93/"/>
    
      <category term="hammer" scheme="http://yoursite.com/tags/hammer/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客命令</title>
    <link href="http://yoursite.com/2016/12/18/hello-world/"/>
    <id>http://yoursite.com/2016/12/18/hello-world/</id>
    <published>2016-12-18T12:12:11.586Z</published>
    <updated>2016-12-21T03:37:29.932Z</updated>
    
    <content type="html"><![CDATA[<p>写在第一页，作为建立个人博客的第一篇文章，使用<a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>搭建，记录日常使用的常用命令。<br>本博客使用品<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>主题。精于心，简于形</p>
<a id="more"></a>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<h3 id="创建新页面"><a href="#创建新页面" class="headerlink" title="创建新页面"></a>创建新页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new page <span class="string">"My New Page"</span></div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/server.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/generating.html" target="_blank" rel="external">更多信息</a></p>
<h3 id="发布到远程服务器"><a href="#发布到远程服务器" class="headerlink" title="发布到远程服务器"></a>发布到远程服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p><a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="external">更多信息</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在第一页，作为建立个人博客的第一篇文章，使用&lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;搭建，记录日常使用的常用命令。&lt;br&gt;本博客使用品&lt;a href=&quot;http://theme-next.iissnan.com/&quot;&gt;Next&lt;/a&gt;主题。精于心，简于形&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
